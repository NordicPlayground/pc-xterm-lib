{"version":3,"sources":["webpack://PcXtermLib/./node_modules/ansi-colors/index.js","webpack://PcXtermLib/./node_modules/ansi-colors/symbols.js","webpack://PcXtermLib/./node_modules/ansi-escapes/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/toInteger/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/requiredArgs/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/toDate/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/addDays/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/addMonths/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/add/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isWeekend/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isSunday/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isSaturday/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/addBusinessDays/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/addMilliseconds/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/addHours/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/startOfWeek/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/startOfISOWeek/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getISOWeekYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/startOfISOWeekYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/startOfDay/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/differenceInCalendarDays/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/setISOWeekYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/addISOWeekYears/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/addMinutes/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/addQuarters/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/addSeconds/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/addWeeks/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/addYears/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/areIntervalsOverlapping/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/closestIndexTo/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/closestTo/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/compareAsc/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/compareDesc/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isValid/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isSameDay/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/differenceInBusinessDays/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/differenceInCalendarISOWeekYears/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/differenceInCalendarISOWeeks/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/differenceInCalendarMonths/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getQuarter/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/differenceInCalendarQuarters/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/differenceInCalendarWeeks/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/differenceInCalendarYears/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/differenceInDays/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/differenceInMilliseconds/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/differenceInHours/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/subISOWeekYears/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/differenceInISOWeekYears/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/differenceInMinutes/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/differenceInMonths/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/differenceInQuarters/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/differenceInSeconds/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/differenceInWeeks/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/differenceInYears/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/eachDayOfInterval/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/eachHourOfInterval/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/eachMonthOfInterval/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/startOfQuarter/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/eachQuarterOfInterval/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/eachWeekOfInterval/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/eachWeekendOfInterval/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/startOfMonth/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/endOfMonth/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/eachWeekendOfMonth/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/startOfYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/endOfYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/eachWeekendOfYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/eachYearOfInterval/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/endOfDay/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/endOfDecade/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/endOfHour/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/endOfWeek/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/endOfISOWeek/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/endOfISOWeekYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/endOfMinute/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/endOfQuarter/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/endOfSecond/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/endOfToday/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/endOfTomorrow/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/endOfYesterday/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/locale/en-US/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/locale/en-US/_lib/match/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/subMilliseconds/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/format/lightFormatters/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/getUTCWeek/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/format/formatters/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/format/longFormatters/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/protectedTokens/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/format/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/assign/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/cloneObject/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/formatDistance/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/formatDistanceStrict/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/formatDistanceToNow/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/formatDistanceToNowStrict/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/formatDuration/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/formatISO/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/formatISO9075/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/formatISODuration/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/formatRFC3339/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/formatRFC7231/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/formatRelative/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/fromUnixTime/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getDate/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getDay/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getDayOfYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getDaysInMonth/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isLeapYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getDaysInYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getDecade/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getHours/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getISODay/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getISOWeek/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getISOWeeksInYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getMilliseconds/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getMinutes/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getMonth/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getOverlappingDaysInIntervals/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getSeconds/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getTime/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getUnixTime/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getWeekYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/startOfWeekYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getWeek/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getWeekOfMonth/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/lastDayOfMonth/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getWeeksInMonth/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/getYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/subDays/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/subMonths/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/sub/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/intervalToDuration/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isAfter/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isBefore/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isDate/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isEqual/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isExists/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isFirstDayOfMonth/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isFriday/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isFuture/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isLastDayOfMonth/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/setUTCDay/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/parse/_lib/parsers/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/setUTCWeek/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/_lib/setUTCISODay/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/parse/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isMatch/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isMonday/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isPast/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/startOfHour/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isSameHour/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isSameWeek/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isSameISOWeek/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isSameISOWeekYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/startOfMinute/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isSameMinute/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isSameMonth/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isSameQuarter/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/startOfSecond/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isSameSecond/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isSameYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isThisHour/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isThisISOWeek/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isThisMinute/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isThisMonth/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isThisQuarter/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isThisSecond/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isThisWeek/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isThisYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isThursday/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isToday/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isTomorrow/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isTuesday/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isWednesday/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isWithinInterval/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/isYesterday/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/lastDayOfDecade/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/lastDayOfWeek/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/lastDayOfISOWeek/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/lastDayOfISOWeekYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/lastDayOfQuarter/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/lastDayOfYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/lightFormat/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/max/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/min/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/parseISO/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/parseJSON/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/roundToNearestMinutes/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/setMonth/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/set/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/setDate/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/setDay/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/setDayOfYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/setHours/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/setISODay/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/setISOWeek/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/setMilliseconds/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/setMinutes/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/setQuarter/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/setSeconds/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/setWeek/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/setWeekYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/setYear/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/startOfDecade/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/startOfToday/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/startOfTomorrow/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/startOfYesterday/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/subBusinessDays/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/subHours/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/subMinutes/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/subQuarters/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/subSeconds/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/subWeeks/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/subYears/index.js","webpack://PcXtermLib/./node_modules/date-fns/esm/constants/index.js","webpack://PcXtermLib/./node_modules/process/browser.js","webpack://PcXtermLib/./src/NrfTerminalAddon.ts","webpack://PcXtermLib/./src/NrfTerminalCommander.ts","webpack://PcXtermLib/./src/Prompt.ts","webpack://PcXtermLib/./src/addons/AutocompleteAddon.ts","webpack://PcXtermLib/./src/addons/CopyPasteAddon.ts","webpack://PcXtermLib/./src/addons/HistoryAddon.ts","webpack://PcXtermLib/./src/addons/HoverAddon.ts","webpack://PcXtermLib/./src/addons/TimestampAddon.ts","webpack://PcXtermLib/./src/index.ts","webpack://PcXtermLib/./src/utils.ts","webpack://PcXtermLib/webpack/bootstrap","webpack://PcXtermLib/webpack/runtime/define property getters","webpack://PcXtermLib/webpack/runtime/hasOwnProperty shorthand","webpack://PcXtermLib/webpack/runtime/make namespace object","webpack://PcXtermLib/webpack/startup"],"names":["ANSI_REGEX","create","colors","enabled","visible","styles","keys","process","env","FORCE_COLOR","wrap","style","input","newline","stack","str","nl","includes","n","length","Set","reverse","define","name","codes","type","open","close","regex","RegExp","replace","output","ansi","push","Reflect","defineProperty","configurable","enumerable","value","alias","color","setPrototypeOf","this","concat","ansiRegex","hasColor","hasAnsi","lastIndex","test","fn","TypeError","theme","custom","val","Array","isArray","Object","none","clear","noop","stripColor","unstyle","symbols","module","exports","isHyper","TERM_PROGRAM","isWindows","platform","isLinux","common","ballotDisabled","ballotOff","ballotOn","bullet","bulletWhite","fullBlock","heart","identicalTo","line","mark","middot","minus","multiplication","obelus","pencilDownRight","pencilRight","pencilUpRight","percent","pilcrow2","pilcrow","plusMinus","section","starsOff","starsOn","upDownArrow","windows","assign","check","cross","ellipsisLarge","ellipsis","info","question","questionSmall","pointer","pointerSmall","radioOff","radioOn","warning","other","ballotCross","questionFull","ansiEscapes","default","ESC","OSC","BEL","SEP","isTerminalApp","cursorTo","x","y","cursorMove","ret","cursorUp","count","cursorDown","cursorForward","cursorBackward","cursorLeft","cursorSavePosition","cursorRestorePosition","cursorGetPosition","cursorNextLine","cursorPrevLine","cursorHide","cursorShow","eraseLines","i","eraseLine","eraseEndLine","eraseStartLine","eraseDown","eraseUp","eraseScreen","scrollUp","scrollDown","clearScreen","clearTerminal","beep","link","text","url","join","image","buffer","options","width","height","preserveAspectRatio","toString","iTerm","setCwd","cwd","annotation","message","hasX","hasY","Error","isHidden","toInteger","dirtyNumber","NaN","number","Number","isNaN","Math","ceil","floor","requiredArgs","required","args","toDate","argument","arguments","argStr","prototype","call","Date","getTime","console","warn","addDays","dirtyDate","dirtyAmount","date","amount","setDate","getDate","addMonths","dayOfMonth","endOfDesiredMonth","setMonth","getMonth","daysInMonth","setFullYear","getFullYear","add","duration","years","months","weeks","days","hours","minutes","seconds","dateWithMonths","dateWithDays","minutesToAdd","secondsToAdd","msToAdd","finalDate","isWeekend","day","getDay","isSunday","isSaturday","addBusinessDays","startedOnWeekend","getHours","sign","fullWeeks","restDays","abs","setHours","addMilliseconds","timestamp","MILLISECONDS_IN_HOUR","addHours","startOfWeek","dirtyOptions","locale","localeWeekStartsOn","weekStartsOn","defaultWeekStartsOn","RangeError","diff","startOfISOWeek","getISOWeekYear","year","fourthOfJanuaryOfNextYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","startOfISOWeekYear","fourthOfJanuary","MILLISECONDS_IN_MINUTE","getDateMillisecondsPart","getTimezoneOffsetInMilliseconds","baseTimezoneOffset","getTimezoneOffset","setSeconds","millisecondsPartOfTimezoneOffset","startOfDay","MILLISECONDS_IN_DAY","differenceInCalendarDays","dirtyDateLeft","dirtyDateRight","startOfDayLeft","startOfDayRight","timestampLeft","timestampRight","round","setISOWeekYear","dirtyISOWeekYear","isoWeekYear","addISOWeekYears","addMinutes","addQuarters","addSeconds","addWeeks","addYears","areIntervalsOverlapping","dirtyIntervalLeft","dirtyIntervalRight","undefined","intervalLeft","intervalRight","leftStartTime","start","leftEndTime","end","rightStartTime","rightEndTime","inclusive","closestIndexTo","dirtyDateToCompare","dirtyDatesArray","dateToCompare","result","minDistance","timeToCompare","forEach","slice","index","currentDate","distance","closestTo","compareAsc","dateLeft","dateRight","compareDesc","isValid","isSameDay","dateLeftStartOfDay","dateRightStartOfDay","differenceInBusinessDays","calendarDifference","differenceInCalendarISOWeekYears","MILLISECONDS_IN_WEEK","differenceInCalendarISOWeeks","startOfISOWeekLeft","startOfISOWeekRight","differenceInCalendarMonths","yearDiff","monthDiff","getQuarter","quarter","differenceInCalendarQuarters","quarterDiff","differenceInCalendarWeeks","startOfWeekLeft","startOfWeekRight","differenceInCalendarYears","compareLocalAsc","getMinutes","getSeconds","getMilliseconds","differenceInDays","difference","isLastDayNotFull","differenceInMilliseconds","differenceInHours","subISOWeekYears","differenceInISOWeekYears","isLastISOWeekYearNotFull","differenceInMinutes","differenceInMonths","isLastMonthNotFull","differenceInQuarters","differenceInSeconds","differenceInWeeks","differenceInYears","isLastYearNotFull","eachDayOfInterval","dirtyInterval","interval","startDate","endDate","endTime","dates","step","eachHourOfInterval","startTime","setMinutes","eachMonthOfInterval","startOfQuarter","currentMonth","month","eachQuarterOfInterval","startDateQuarter","endDateQuarter","quarters","currentQuarter","eachWeekOfInterval","startDateWeek","endDateWeek","currentWeek","eachWeekendOfInterval","dateInterval","weekends","startOfMonth","endOfMonth","eachWeekendOfMonth","startOfYear","cleanDate","endOfYear","eachWeekendOfYear","eachYearOfInterval","endOfDay","endOfDecade","decade","endOfHour","endOfWeek","endOfISOWeek","endOfISOWeekYear","setMilliseconds","endOfMinute","endOfQuarter","endOfSecond","endOfToday","now","endOfTomorrow","endOfYesterday","formatDistanceLocale","lessThanXSeconds","one","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","buildFormatLongFn","String","defaultWidth","formats","formatLong","full","long","medium","short","time","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","buildLocalizeFn","dirtyIndex","valuesArray","context","formattingValues","defaultFormattingWidth","_defaultWidth","_width","values","argumentCallback","buildMatchFn","dirtyString","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","matchedString","parsePatterns","defaultParseWidth","array","predicate","key","findIndex","object","hasOwnProperty","findKey","valueCallback","rest","code","formatDistance","token","addSuffix","comparison","formatRelative","_date","_baseDate","_options","localize","ordinalNumber","_dirtyOptions","rem100","era","narrow","abbreviated","wide","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","parsePattern","parseInt","parseResult","any","firstWeekContainsDate","subMilliseconds","addLeadingZeros","targetLength","signedYear","getUTCFullYear","M","getUTCMonth","d","getUTCDate","a","dayPeriodEnumValue","getUTCHours","toUpperCase","h","H","m","getUTCMinutes","s","getUTCSeconds","S","numberOfDigits","milliseconds","getUTCMilliseconds","pow","startOfUTCISOWeek","getUTCDay","setUTCDate","setUTCHours","getUTCISOWeekYear","setUTCFullYear","startOfUTCISOWeekYear","getUTCISOWeek","startOfUTCWeek","getUTCWeekYear","localeFirstWeekContainsDate","defaultFirstWeekContainsDate","firstWeekOfNextYear","firstWeekOfThisYear","startOfUTCWeekYear","firstWeek","getUTCWeek","formatTimezoneShort","offset","dirtyDelimiter","absOffset","delimiter","formatTimezoneWithOptionalMinutes","formatTimezone","G","unit","lightFormatters","Y","signedWeekYear","weekYear","R","u","Q","q","L","w","week","I","isoWeek","D","dayOfYear","setUTCMonth","startOfYearTimestamp","getUTCDayOfYear","E","dayOfWeek","e","localDayOfWeek","c","isoDayOfWeek","b","B","K","k","X","_localize","timezoneOffset","_originalDate","O","z","t","originalDate","T","dateLongFormatter","pattern","timeLongFormatter","p","P","dateTimeFormat","datePattern","timePattern","protectedDayOfYearTokens","protectedWeekYearTokens","isProtectedDayOfYearToken","indexOf","isProtectedWeekYearToken","throwProtectedError","format","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","dirtyFormatStr","formatStr","utcDate","formatterOptions","map","substring","firstCharacter","longFormatter","cleanEscapedString","formatter","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","target","dirtyObject","property","cloneObject","MINUTES_IN_DAY","MINUTES_IN_MONTH","dirtyBaseDate","localizeOptions","Boolean","offsetInSeconds","includeSeconds","nearestMonth","monthsSinceStartOfYear","MINUTES_IN_YEAR","formatDistanceStrict","roundingMethodFn","roundingMethod","formatDistanceToNow","formatDistanceToNowStrict","defaultFormat","formatDuration","zero","reduce","acc","formatISO","representation","tzOffset","dateDelimiter","timeDelimiter","absoluteOffset","hourOffset","minuteOffset","hour","minute","second","separator","formatISO9075","formatISODuration","_duration$years","_duration$months","_duration$days","_duration$hours","_duration$minutes","_duration$seconds","formatRFC3339","fractionDigits","fractionalSecond","fractionalSeconds","formatRFC7231","dayName","monthName","baseDate","utcBaseDate","fromUnixTime","dirtyUnixTime","unixTime","getDayOfYear","getDaysInMonth","monthIndex","lastDayOfMonth","isLeapYear","getDaysInYear","getDecade","getISODay","getISOWeek","getISOWeeksInYear","thisYear","nextYear","valueOf","getOverlappingDaysInIntervals","isOverlapping","overlapStartDate","overlapEndDate","differenceInMs","getUnixTime","getWeekYear","startOfWeekYear","getWeek","getWeekOfMonth","currentDayOfMonth","startWeekDay","lastDayOfFirstWeek","weekNumber","remainingDaysAfterFirstWeek","getWeeksInMonth","getYear","subDays","subMonths","sub","dateWithoutMonths","dateWithoutDays","minutestoSub","secondstoSub","mstoSub","intervalToDuration","_ref","remainingMonths","remainingDays","remainingHours","remainingMinutes","remainingSeconds","isAfter","isBefore","isDate","isEqual","dirtyLeftDate","dirtyRightDate","isExists","isFirstDayOfMonth","isFriday","isFuture","isLastDayOfMonth","setUTCDay","dirtyDay","currentDay","remainder","dayIndex","numericPatterns","timezonePatterns","parseNumericPattern","parseTimezonePattern","parseAnyDigitsSigned","parseNDigits","parseNDigitsSigned","dayPeriodEnumToHours","enumValue","normalizeTwoDigitYear","twoDigitYear","currentYear","isCommonEra","absCurrentYear","rangeEnd","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","isLeapYearIndex","priority","parse","set","flags","incompatibleTokens","isTwoDigitYear","validate","normalizedTwoDigitYear","_match","_flags","firstWeekOfYear","dirtyWeek","setUTCWeek","dirtyISOWeek","setUTCISOWeek","subPriority","wholeWeekDays","setUTCISODay","isPM","setUTCMinutes","setUTCSeconds","setUTCMilliseconds","timestampIsSet","_token","notWhitespaceRegExp","dirtyDateString","dirtyFormatString","dirtyReferenceDate","dateString","formatString","subFnOptions","setters","dateToSystemTimezone","tokens","usedTokens","parser","incompatibleToken","_i","usedToken","fullToken","uniquePrioritySetters","setter","sort","filter","setterArray","convertedDate","isMatch","isMonday","isPast","startOfHour","isSameHour","dateLeftStartOfHour","dateRightStartOfHour","isSameWeek","dateLeftStartOfWeek","dateRightStartOfWeek","isSameISOWeek","isSameISOWeekYear","dateLeftStartOfYear","dateRightStartOfYear","startOfMinute","isSameMinute","dateLeftStartOfMinute","dateRightStartOfMinute","isSameMonth","isSameQuarter","dateLeftStartOfQuarter","dateRightStartOfQuarter","startOfSecond","isSameSecond","dateLeftStartOfSecond","dateRightStartOfSecond","isSameYear","isThisHour","isThisISOWeek","isThisMinute","isThisMonth","isThisQuarter","isThisSecond","isThisWeek","isThisYear","isThursday","isToday","isTomorrow","isTuesday","isWednesday","isWithinInterval","isYesterday","lastDayOfDecade","lastDayOfWeek","lastDayOfISOWeek","lastDayOfISOWeekYear","lastDayOfQuarter","lastDayOfYear","lightFormat","max","datesArray","min","patterns","dateTimeDelimiter","timeZoneDelimiter","timezone","dateRegex","timeRegex","timezoneRegex","parseISO","additionalDigits","dateStrings","splitDateString","parseYearResult","parseYear","parseDate","restDateString","parseTime","parseTimezone","timeString","split","substr","exec","captures","century","isWeekDate","parseDateUnit","_year","validateWeekDate","dayOfISOWeekYear","daysInMonths","validateDate","validateDayOfYearDate","parseTimeUnit","validateTime","parseFloat","timezoneString","_hours","validateTimezone","parseJSON","parts","UTC","roundToNearestMinutes","nearestTo","roundedMinutes","remainderMinutes","addedMinutes","dirtyMonth","dateWithDesiredMonth","dirtyDayOfMonth","setDay","delta","setDayOfYear","dirtyDayOfYear","dirtyHours","setISODay","setISOWeek","dirtyMilliseconds","dirtyMinutes","setQuarter","dirtyQuarter","oldQuarter","dirtySeconds","setWeek","setWeekYear","dirtyWeekYear","setYear","dirtyYear","startOfDecade","startOfToday","startOfTomorrow","startOfYesterday","subBusinessDays","subHours","subMinutes","subQuarters","subSeconds","subWeeks","subYears","maxTime","minTime","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","len","run","marker","runClearTimeout","Item","nextTick","apply","title","browser","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","chdir","dir","umask","commander","meta","debug","terminal","onActivate","_terminal","_prompt","_config","_historyAddon","_lineSpan","_lineCount","_userInput_1","_registeredCommands","_userInputChangeListeners","_runCommandListeners","__createBinding","o","k2","get","__setModuleDefault","v","__importStar","mod","__esModule","__classPrivateFieldSet","receiver","privateMap","has","__classPrivateFieldGet","__importDefault","Prompt_1","HistoryAddon_1","TimestampAddon_1","CopyPasteAddon_1","AutocompleteAddon_1","utils_1","HoverAddon_1","config","prompt","historyAddon","loadAddon","showTimestamps","timestampAddon","registerCommand","toggleTimestamps","copyPasteAddon","autocompleteAddon","completerFunction","hoverAddon","onKey","bind","onData","log","history","clearHistory","registerCustomCommands","newUserInput","l","userInput","command","callback","entries","commands","listener","clearUserInput","write","_userInput","active","cursorX","maxRightCursor","atBeginningOfLine","atEndOfLine","cmd","trim","unspecifiedCommandHandler","breakCurrentCommand","resetCursor","data","charCode","CharCodes","CTRL_C","ARROW_KEY","BACKSPACE","backspace","LF","isVisible","runCommand","updateLineSpan","enable","domEvent","moveCaretLeft","moveCaretRight","ctrlKey","isMac","getSelection","cols","WeakMap","_template","_commander","template","lineCount","stripAnsiCodes","_suggestions","_root","_container","_completerFunction","_highlightedIndex","_prevUserInput","_hasCancelled","NrfTerminalAddon_1","HIGHLIGHTED_CLASS","AutocompleteAddon","completer","super","onUserInputChange","initialiseContainer","patchSuggestionBox","repositionX","repositionY","navigateUp","navigateDown","clearSuggestions","selectSuggestion","element","autocompleteRoot","document","createElement","className","suggestionsContainer","appendChild","highlightSuggestion","id","completions","replaceUserInput","startsWith","alreadyShowing","shrinkMatch","growMatch","addSuggestion","removeSuggestion","_a","suggestionValue","matchedSpan","textContent","dataset","unmatchedSpan","unmatchedFragment","suggestionLi","classList","suggestionId","suggestion","getSuggestionElement","removeChild","matched","unmatched","querySelectorAll","lastCharacter","remove","innerHTML","querySelector","left","lineNo","top","CopyPasteAddon","async","execCommand","isPaste","navigator","clipboard","readText","then","clipText","lines","pop","paste","_history","_currentIndex","HistoryAddon","onRunCommand","addToHistory","disable","moveBackwards","moveForwards","unshift","currentCommand","HoverAddon","hoverMetadata","r","registerLinkMatcher","uri","_showTimestamps","dateFns","TimestampAddon","showingTimestamps","writeTimestamp","formatted","endCols","bold","grey","NrfTerminalCommander","NrfTerminalCommander_1","charCodeAt","EOL","ESCAPE","window","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","definition","obj","prop","Symbol","toStringTag","__webpack_exports__"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nconst isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);\nconst identity = val => val;\n\n/* eslint-disable no-control-regex */\n// this is a modified version of https://github.com/chalk/ansi-regex (MIT License)\nconst ANSI_REGEX = /[\\u001b\\u009b][[\\]#;?()]*(?:(?:(?:[^\\W_]*;?[^\\W_]*)\\u0007)|(?:(?:[0-9]{1,4}(;[0-9]{0,4})*)?[~0-9=<>cf-nqrtyA-PRZ]))/g;\n\nconst create = () => {\n  const colors = { enabled: true, visible: true, styles: {}, keys: {} };\n\n  if ('FORCE_COLOR' in process.env) {\n    colors.enabled = process.env.FORCE_COLOR !== '0';\n  }\n\n  const ansi = style => {\n    let open = style.open = `\\u001b[${style.codes[0]}m`;\n    let close = style.close = `\\u001b[${style.codes[1]}m`;\n    let regex = style.regex = new RegExp(`\\\\u001b\\\\[${style.codes[1]}m`, 'g');\n    style.wrap = (input, newline) => {\n      if (input.includes(close)) input = input.replace(regex, close + open);\n      let output = open + input + close;\n      // see https://github.com/chalk/chalk/pull/92, thanks to the\n      // chalk contributors for this fix. However, we've confirmed that\n      // this issue is also present in Windows terminals\n      return newline ? output.replace(/\\r*\\n/g, `${close}$&${open}`) : output;\n    };\n    return style;\n  };\n\n  const wrap = (style, input, newline) => {\n    return typeof style === 'function' ? style(input) : style.wrap(input, newline);\n  };\n\n  const style = (input, stack) => {\n    if (input === '' || input == null) return '';\n    if (colors.enabled === false) return input;\n    if (colors.visible === false) return '';\n    let str = '' + input;\n    let nl = str.includes('\\n');\n    let n = stack.length;\n    if (n > 0 && stack.includes('unstyle')) {\n      stack = [...new Set(['unstyle', ...stack])].reverse();\n    }\n    while (n-- > 0) str = wrap(colors.styles[stack[n]], str, nl);\n    return str;\n  };\n\n  const define = (name, codes, type) => {\n    colors.styles[name] = ansi({ name, codes });\n    let keys = colors.keys[type] || (colors.keys[type] = []);\n    keys.push(name);\n\n    Reflect.defineProperty(colors, name, {\n      configurable: true,\n      enumerable: true,\n      set(value) {\n        colors.alias(name, value);\n      },\n      get() {\n        let color = input => style(input, color.stack);\n        Reflect.setPrototypeOf(color, colors);\n        color.stack = this.stack ? this.stack.concat(name) : [name];\n        return color;\n      }\n    });\n  };\n\n  define('reset', [0, 0], 'modifier');\n  define('bold', [1, 22], 'modifier');\n  define('dim', [2, 22], 'modifier');\n  define('italic', [3, 23], 'modifier');\n  define('underline', [4, 24], 'modifier');\n  define('inverse', [7, 27], 'modifier');\n  define('hidden', [8, 28], 'modifier');\n  define('strikethrough', [9, 29], 'modifier');\n\n  define('black', [30, 39], 'color');\n  define('red', [31, 39], 'color');\n  define('green', [32, 39], 'color');\n  define('yellow', [33, 39], 'color');\n  define('blue', [34, 39], 'color');\n  define('magenta', [35, 39], 'color');\n  define('cyan', [36, 39], 'color');\n  define('white', [37, 39], 'color');\n  define('gray', [90, 39], 'color');\n  define('grey', [90, 39], 'color');\n\n  define('bgBlack', [40, 49], 'bg');\n  define('bgRed', [41, 49], 'bg');\n  define('bgGreen', [42, 49], 'bg');\n  define('bgYellow', [43, 49], 'bg');\n  define('bgBlue', [44, 49], 'bg');\n  define('bgMagenta', [45, 49], 'bg');\n  define('bgCyan', [46, 49], 'bg');\n  define('bgWhite', [47, 49], 'bg');\n\n  define('blackBright', [90, 39], 'bright');\n  define('redBright', [91, 39], 'bright');\n  define('greenBright', [92, 39], 'bright');\n  define('yellowBright', [93, 39], 'bright');\n  define('blueBright', [94, 39], 'bright');\n  define('magentaBright', [95, 39], 'bright');\n  define('cyanBright', [96, 39], 'bright');\n  define('whiteBright', [97, 39], 'bright');\n\n  define('bgBlackBright', [100, 49], 'bgBright');\n  define('bgRedBright', [101, 49], 'bgBright');\n  define('bgGreenBright', [102, 49], 'bgBright');\n  define('bgYellowBright', [103, 49], 'bgBright');\n  define('bgBlueBright', [104, 49], 'bgBright');\n  define('bgMagentaBright', [105, 49], 'bgBright');\n  define('bgCyanBright', [106, 49], 'bgBright');\n  define('bgWhiteBright', [107, 49], 'bgBright');\n\n  colors.ansiRegex = ANSI_REGEX;\n  colors.hasColor = colors.hasAnsi = str => {\n    colors.ansiRegex.lastIndex = 0;\n    return typeof str === 'string' && str !== '' && colors.ansiRegex.test(str);\n  };\n\n  colors.alias = (name, color) => {\n    let fn = typeof color === 'string' ? colors[color] : color;\n\n    if (typeof fn !== 'function') {\n      throw new TypeError('Expected alias to be the name of an existing color (string) or a function');\n    }\n\n    if (!fn.stack) {\n      Reflect.defineProperty(fn, 'name', { value: name });\n      colors.styles[name] = fn;\n      fn.stack = [name];\n    }\n\n    Reflect.defineProperty(colors, name, {\n      configurable: true,\n      enumerable: true,\n      set(value) {\n        colors.alias(name, value);\n      },\n      get() {\n        let color = input => style(input, color.stack);\n        Reflect.setPrototypeOf(color, colors);\n        color.stack = this.stack ? this.stack.concat(fn.stack) : fn.stack;\n        return color;\n      }\n    });\n  };\n\n  colors.theme = custom => {\n    if (!isObject(custom)) throw new TypeError('Expected theme to be an object');\n    for (let name of Object.keys(custom)) {\n      colors.alias(name, custom[name]);\n    }\n    return colors;\n  };\n\n  colors.alias('unstyle', str => {\n    if (typeof str === 'string' && str !== '') {\n      colors.ansiRegex.lastIndex = 0;\n      return str.replace(colors.ansiRegex, '');\n    }\n    return '';\n  });\n\n  colors.alias('noop', str => str);\n  colors.none = colors.clear = colors.noop;\n\n  colors.stripColor = colors.unstyle;\n  colors.symbols = require('./symbols');\n  colors.define = define;\n  return colors;\n};\n\nmodule.exports = create();\nmodule.exports.create = create;\n","'use strict';\n\nconst isHyper = process.env.TERM_PROGRAM === 'Hyper';\nconst isWindows = process.platform === 'win32';\nconst isLinux = process.platform === 'linux';\n\nconst common = {\n  ballotDisabled: '☒',\n  ballotOff: '☐',\n  ballotOn: '☑',\n  bullet: '•',\n  bulletWhite: '◦',\n  fullBlock: '█',\n  heart: '❤',\n  identicalTo: '≡',\n  line: '─',\n  mark: '※',\n  middot: '·',\n  minus: '－',\n  multiplication: '×',\n  obelus: '÷',\n  pencilDownRight: '✎',\n  pencilRight: '✏',\n  pencilUpRight: '✐',\n  percent: '%',\n  pilcrow2: '❡',\n  pilcrow: '¶',\n  plusMinus: '±',\n  section: '§',\n  starsOff: '☆',\n  starsOn: '★',\n  upDownArrow: '↕'\n};\n\nconst windows = Object.assign({}, common, {\n  check: '√',\n  cross: '×',\n  ellipsisLarge: '...',\n  ellipsis: '...',\n  info: 'i',\n  question: '?',\n  questionSmall: '?',\n  pointer: '>',\n  pointerSmall: '»',\n  radioOff: '( )',\n  radioOn: '(*)',\n  warning: '‼'\n});\n\nconst other = Object.assign({}, common, {\n  ballotCross: '✘',\n  check: '✔',\n  cross: '✖',\n  ellipsisLarge: '⋯',\n  ellipsis: '…',\n  info: 'ℹ',\n  question: '?',\n  questionFull: '？',\n  questionSmall: '﹖',\n  pointer: isLinux ? '▸' : '❯',\n  pointerSmall: isLinux ? '‣' : '›',\n  radioOff: '◯',\n  radioOn: '◉',\n  warning: '⚠'\n});\n\nmodule.exports = (isWindows && !isHyper) ? windows : other;\nReflect.defineProperty(module.exports, 'common', { enumerable: false, value: common });\nReflect.defineProperty(module.exports, 'windows', { enumerable: false, value: windows });\nReflect.defineProperty(module.exports, 'other', { enumerable: false, value: other });\n","'use strict';\nconst ansiEscapes = module.exports;\n// TODO: remove this in the next major version\nmodule.exports.default = ansiEscapes;\n\nconst ESC = '\\u001B[';\nconst OSC = '\\u001B]';\nconst BEL = '\\u0007';\nconst SEP = ';';\nconst isTerminalApp = process.env.TERM_PROGRAM === 'Apple_Terminal';\n\nansiEscapes.cursorTo = (x, y) => {\n\tif (typeof x !== 'number') {\n\t\tthrow new TypeError('The `x` argument is required');\n\t}\n\n\tif (typeof y !== 'number') {\n\t\treturn ESC + (x + 1) + 'G';\n\t}\n\n\treturn ESC + (y + 1) + ';' + (x + 1) + 'H';\n};\n\nansiEscapes.cursorMove = (x, y) => {\n\tif (typeof x !== 'number') {\n\t\tthrow new TypeError('The `x` argument is required');\n\t}\n\n\tlet ret = '';\n\n\tif (x < 0) {\n\t\tret += ESC + (-x) + 'D';\n\t} else if (x > 0) {\n\t\tret += ESC + x + 'C';\n\t}\n\n\tif (y < 0) {\n\t\tret += ESC + (-y) + 'A';\n\t} else if (y > 0) {\n\t\tret += ESC + y + 'B';\n\t}\n\n\treturn ret;\n};\n\nansiEscapes.cursorUp = (count = 1) => ESC + count + 'A';\nansiEscapes.cursorDown = (count = 1) => ESC + count + 'B';\nansiEscapes.cursorForward = (count = 1) => ESC + count + 'C';\nansiEscapes.cursorBackward = (count = 1) => ESC + count + 'D';\n\nansiEscapes.cursorLeft = ESC + 'G';\nansiEscapes.cursorSavePosition = isTerminalApp ? '\\u001B7' : ESC + 's';\nansiEscapes.cursorRestorePosition = isTerminalApp ? '\\u001B8' : ESC + 'u';\nansiEscapes.cursorGetPosition = ESC + '6n';\nansiEscapes.cursorNextLine = ESC + 'E';\nansiEscapes.cursorPrevLine = ESC + 'F';\nansiEscapes.cursorHide = ESC + '?25l';\nansiEscapes.cursorShow = ESC + '?25h';\n\nansiEscapes.eraseLines = count => {\n\tlet clear = '';\n\n\tfor (let i = 0; i < count; i++) {\n\t\tclear += ansiEscapes.eraseLine + (i < count - 1 ? ansiEscapes.cursorUp() : '');\n\t}\n\n\tif (count) {\n\t\tclear += ansiEscapes.cursorLeft;\n\t}\n\n\treturn clear;\n};\n\nansiEscapes.eraseEndLine = ESC + 'K';\nansiEscapes.eraseStartLine = ESC + '1K';\nansiEscapes.eraseLine = ESC + '2K';\nansiEscapes.eraseDown = ESC + 'J';\nansiEscapes.eraseUp = ESC + '1J';\nansiEscapes.eraseScreen = ESC + '2J';\nansiEscapes.scrollUp = ESC + 'S';\nansiEscapes.scrollDown = ESC + 'T';\n\nansiEscapes.clearScreen = '\\u001Bc';\n\nansiEscapes.clearTerminal = process.platform === 'win32' ?\n\t`${ansiEscapes.eraseScreen}${ESC}0f` :\n\t// 1. Erases the screen (Only done in case `2` is not supported)\n\t// 2. Erases the whole screen including scrollback buffer\n\t// 3. Moves cursor to the top-left position\n\t// More info: https://www.real-world-systems.com/docs/ANSIcode.html\n\t`${ansiEscapes.eraseScreen}${ESC}3J${ESC}H`;\n\nansiEscapes.beep = BEL;\n\nansiEscapes.link = (text, url) => {\n\treturn [\n\t\tOSC,\n\t\t'8',\n\t\tSEP,\n\t\tSEP,\n\t\turl,\n\t\tBEL,\n\t\ttext,\n\t\tOSC,\n\t\t'8',\n\t\tSEP,\n\t\tSEP,\n\t\tBEL\n\t].join('');\n};\n\nansiEscapes.image = (buffer, options = {}) => {\n\tlet ret = `${OSC}1337;File=inline=1`;\n\n\tif (options.width) {\n\t\tret += `;width=${options.width}`;\n\t}\n\n\tif (options.height) {\n\t\tret += `;height=${options.height}`;\n\t}\n\n\tif (options.preserveAspectRatio === false) {\n\t\tret += ';preserveAspectRatio=0';\n\t}\n\n\treturn ret + ':' + buffer.toString('base64') + BEL;\n};\n\nansiEscapes.iTerm = {\n\tsetCwd: (cwd = process.cwd()) => `${OSC}50;CurrentDir=${cwd}${BEL}`,\n\n\tannotation: (message, options = {}) => {\n\t\tlet ret = `${OSC}1337;`;\n\n\t\tconst hasX = typeof options.x !== 'undefined';\n\t\tconst hasY = typeof options.y !== 'undefined';\n\t\tif ((hasX || hasY) && !(hasX && hasY && typeof options.length !== 'undefined')) {\n\t\t\tthrow new Error('`x`, `y` and `length` must be defined when `x` or `y` is defined');\n\t\t}\n\n\t\tmessage = message.replace(/\\|/g, '');\n\n\t\tret += options.isHidden ? 'AddHiddenAnnotation=' : 'AddAnnotation=';\n\n\t\tif (options.length > 0) {\n\t\t\tret +=\n\t\t\t\t\t(hasX ?\n\t\t\t\t\t\t[message, options.length, options.x, options.y] :\n\t\t\t\t\t\t[options.length, message]).join('|');\n\t\t} else {\n\t\t\tret += message;\n\t\t}\n\n\t\treturn ret + BEL;\n\t}\n};\n","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * var result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * var result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 1, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import addDays from '../addDays/index.js';\nimport addMonths from '../addMonths/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\n/**\n * @name add\n * @category Common Helpers\n * @summary Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @description\n * Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n *\n * | Key            | Description                        |\n * |----------------|------------------------------------|\n * | years          | Amount of years to be added        |\n * | months         | Amount of months to be added       |\n * | weeks          | Amount of weeks to be added       |\n * | days           | Amount of days to be added         |\n * | hours          | Amount of hours to be added        |\n * | minutes        | Amount of minutes to be added      |\n * | seconds        | Amount of seconds to be added      |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add the following duration to 1 September 2014, 10:19:50\n * var result = add(new Date(2014, 8, 1, 10, 19, 50), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30,\n * })\n * //=> Thu Jun 15 2017 15:29:20\n */\n\nexport default function add(dirtyDate, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || typeof duration !== 'object') return new Date(NaN);\n  var years = 'years' in duration ? toInteger(duration.years) : 0;\n  var months = 'months' in duration ? toInteger(duration.months) : 0;\n  var weeks = 'weeks' in duration ? toInteger(duration.weeks) : 0;\n  var days = 'days' in duration ? toInteger(duration.days) : 0;\n  var hours = 'hours' in duration ? toInteger(duration.hours) : 0;\n  var minutes = 'minutes' in duration ? toInteger(duration.minutes) : 0;\n  var seconds = 'seconds' in duration ? toInteger(duration.seconds) : 0; // Add years and months\n\n  var date = toDate(dirtyDate);\n  var dateWithMonths = months || years ? addMonths(date, months + years * 12) : date; // Add weeks and days\n\n  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths; // Add days, hours, minutes and seconds\n\n  var minutesToAdd = minutes + hours * 60;\n  var secondsToAdd = seconds + minutesToAdd * 60;\n  var msToAdd = secondsToAdd * 1000;\n  var finalDate = new Date(dateWithDays.getTime() + msToAdd);\n  return finalDate;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isWeekend\n * @category Weekday Helpers\n * @summary Does the given date fall on a weekend?\n *\n * @description\n * Does the given date fall on a weekend?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date falls on a weekend\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Does 5 October 2014 fall on a weekend?\n * var result = isWeekend(new Date(2014, 9, 5))\n * //=> true\n */\n\nexport default function isWeekend(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  return day === 0 || day === 6;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSunday\n * @category Weekday Helpers\n * @summary Is the given date Sunday?\n *\n * @description\n * Is the given date Sunday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Sunday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 21 September 2014 Sunday?\n * var result = isSunday(new Date(2014, 8, 21))\n * //=> true\n */\n\nexport default function isSunday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 0;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSaturday\n * @category Weekday Helpers\n * @summary Is the given date Saturday?\n *\n * @description\n * Is the given date Saturday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Saturday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 27 September 2014 Saturday?\n * var result = isSaturday(new Date(2014, 8, 27))\n * //=> true\n */\n\nexport default function isSaturday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 6;\n}","import isWeekend from '../isWeekend/index.js';\nimport toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nimport isSunday from '../isSunday/index.js';\nimport isSaturday from '../isSaturday/index.js';\n/**\n * @name addBusinessDays\n * @category Day Helpers\n * @summary Add the specified number of business days (mon - fri) to the given date.\n *\n * @description\n * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of business days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the business days added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 10 business days to 1 September 2014:\n * var result = addBusinessDays(new Date(2014, 8, 1), 10)\n * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)\n */\n\nexport default function addBusinessDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var startedOnWeekend = isWeekend(date);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) return new Date(NaN);\n  var hours = date.getHours();\n  var sign = amount < 0 ? -1 : 1;\n  var fullWeeks = toInteger(amount / 5);\n  date.setDate(date.getDate() + fullWeeks * 7); // Get remaining days not part of a full week\n\n  var restDays = Math.abs(amount % 5); // Loops over remaining days\n\n  while (restDays > 0) {\n    date.setDate(date.getDate() + sign);\n    if (!isWeekend(date)) restDays -= 1;\n  } // If the date is a weekend day and we reduce a dividable of\n  // 5 from it, we land on a weekend date.\n  // To counter this, we add days accordingly to land on the next business day\n\n\n  if (startedOnWeekend && isWeekend(date) && amount !== 0) {\n    // If we're reducing days, we want to add days until we land on a weekday\n    // If we're adding days we want to reduce days until we land on a weekday\n    if (isSaturday(date)) date.setDate(date.getDate() + (sign < 0 ? 2 : -1));\n    if (isSunday(date)) date.setDate(date.getDate() + (sign < 0 ? 1 : -2));\n  } // Restore hours to avoid DST lag\n\n\n  date.setHours(hours);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMilliseconds from '../addMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of hours to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the hours added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * var result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\n\nexport default function addHours(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);\n}","import toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import startOfWeek from '../startOfWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * var result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  return startOfWeek(dirtyDate, {\n    weekStartsOn: 1\n  });\n}","import toDate from '../toDate/index.js';\nimport startOfISOWeek from '../startOfISOWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `getISOYear` to `getISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `getWeekYear`.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * var result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\n\nexport default function getISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import getISOWeekYear from '../getISOWeekYear/index.js';\nimport startOfISOWeek from '../startOfISOWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * var result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\n\nexport default function startOfISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  var date = startOfISOWeek(fourthOfJanuary);\n  return date;\n}","var MILLISECONDS_IN_MINUTE = 60000;\n\nfunction getDateMillisecondsPart(date) {\n  return date.getTime() % MILLISECONDS_IN_MINUTE;\n}\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\n\n\nexport default function getTimezoneOffsetInMilliseconds(dirtyDate) {\n  var date = new Date(dirtyDate.getTime());\n  var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());\n  date.setSeconds(0, 0);\n  var hasNegativeUTCOffset = baseTimezoneOffset > 0;\n  var millisecondsPartOfTimezoneOffset = hasNegativeUTCOffset ? (MILLISECONDS_IN_MINUTE + getDateMillisecondsPart(date)) % MILLISECONDS_IN_MINUTE : getDateMillisecondsPart(date);\n  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport startOfDay from '../startOfDay/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_DAY = 86400000;\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * var result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\n\nexport default function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport startOfISOWeekYear from '../startOfISOWeekYear/index.js';\nimport differenceInCalendarDays from '../differenceInCalendarDays/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Set the ISO week-numbering year to the given date.\n *\n * @description\n * Set the ISO week-numbering year to the given date,\n * saving the week number and the weekday number.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `setISOYear` to `setISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `setWeekYear`.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} isoWeekYear - the ISO week-numbering year of the new date\n * @returns {Date} the new date with the ISO week-numbering year set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set ISO week-numbering year 2007 to 29 December 2008:\n * var result = setISOWeekYear(new Date(2008, 11, 29), 2007)\n * //=> Mon Jan 01 2007 00:00:00\n */\n\nexport default function setISOWeekYear(dirtyDate, dirtyISOWeekYear) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var isoWeekYear = toInteger(dirtyISOWeekYear);\n  var diff = differenceInCalendarDays(date, startOfISOWeekYear(date));\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setFullYear(isoWeekYear, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  date = startOfISOWeekYear(fourthOfJanuary);\n  date.setDate(date.getDate() + diff);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport getISOWeekYear from '../getISOWeekYear/index.js';\nimport setISOWeekYear from '../setISOWeekYear/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addISOWeekYears\n * @category ISO Week-Numbering Year Helpers\n * @summary Add the specified number of ISO week-numbering years to the given date.\n *\n * @description\n * Add the specified number of ISO week-numbering years to the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `addISOYears` to `addISOWeekYears`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `addWeekYears`.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of ISO week-numbering years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the ISO week-numbering years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 ISO week-numbering years to 2 July 2010:\n * var result = addISOWeekYears(new Date(2010, 6, 2), 5)\n * //=> Fri Jun 26 2015 00:00:00\n */\n\nexport default function addISOWeekYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return setISOWeekYear(dirtyDate, getISOWeekYear(dirtyDate) + amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMilliseconds from '../addMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_MINUTE = 60000;\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * var result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\n\nexport default function addMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMonths from '../addMonths/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addQuarters\n * @category Quarter Helpers\n * @summary Add the specified number of year quarters to the given date.\n *\n * @description\n * Add the specified number of year quarters to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of quarters to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the quarters added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 1 quarter to 1 September 2014:\n * var result = addQuarters(new Date(2014, 8, 1), 1)\n * //=> Mon Dec 01 2014 00:00:00\n */\n\nexport default function addQuarters(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  var months = amount * 3;\n  return addMonths(dirtyDate, months);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMilliseconds from '../addMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addSeconds\n * @category Second Helpers\n * @summary Add the specified number of seconds to the given date.\n *\n * @description\n * Add the specified number of seconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 seconds to 10 July 2014 12:45:00:\n * var result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:45:30\n */\n\nexport default function addSeconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * 1000);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addDays from '../addDays/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addWeeks\n * @category Week Helpers\n * @summary Add the specified number of weeks to the given date.\n *\n * @description\n * Add the specified number of week to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 4 weeks to 1 September 2014:\n * var result = addWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Sep 29 2014 00:00:00\n */\n\nexport default function addWeeks(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  var days = amount * 7;\n  return addDays(dirtyDate, days);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMonths from '../addMonths/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * var result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\n\nexport default function addYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, amount * 12);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name areIntervalsOverlapping\n * @category Interval Helpers\n * @summary Is the given time interval overlapping with another time interval?\n *\n * @description\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `areRangesOverlapping` to `areIntervalsOverlapping`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   areRangesOverlapping(\n *     new Date(2014, 0, 10), new Date(2014, 0, 20),\n *     new Date(2014, 0, 17), new Date(2014, 0, 21)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   areIntervalsOverlapping(\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *     { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n *   )\n *   ```\n *\n * @param {Interval} intervalLeft - the first interval to compare. See [Interval]{@link docs/types/Interval}\n * @param {Interval} intervalRight - the second interval to compare. See [Interval]{@link docs/types/Interval}\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.inclusive=false] - whether the comparison is inclusive or not\n * @returns {Boolean} whether the time intervals are overlapping\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> true\n *\n * @example\n * // For non-overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> false\n *\n * @example\n * // For adjacent time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\n * )\n * //=> false\n *\n * @example\n * // Using the inclusive option:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) }\n * )\n * //=> false\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\n *   { inclusive: true }\n * )\n * //=> true\n */\n\nexport default function areIntervalsOverlapping(dirtyIntervalLeft, dirtyIntervalRight) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  requiredArgs(2, arguments);\n  var intervalLeft = dirtyIntervalLeft || {};\n  var intervalRight = dirtyIntervalRight || {};\n  var leftStartTime = toDate(intervalLeft.start).getTime();\n  var leftEndTime = toDate(intervalLeft.end).getTime();\n  var rightStartTime = toDate(intervalRight.start).getTime();\n  var rightEndTime = toDate(intervalRight.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  if (options.inclusive) {\n    return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\n  }\n\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name closestIndexTo\n * @category Common Helpers\n * @summary Return an index of the closest date from the array comparing to the given date.\n *\n * @description\n * Return an index of the closest date from the array comparing to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now, `closestIndexTo` doesn't throw an exception\n *   when the second argument is not an array, and returns Invalid Date instead.\n *\n * @param {Date|Number} dateToCompare - the date to compare with\n * @param {Date[]|Number[]} datesArray - the array to search\n * @returns {Number} an index of the date closest to the given date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Which date is closer to 6 September 2015?\n * var dateToCompare = new Date(2015, 8, 6)\n * var datesArray = [\n *   new Date(2015, 0, 1),\n *   new Date(2016, 0, 1),\n *   new Date(2017, 0, 1)\n * ]\n * var result = closestIndexTo(dateToCompare, datesArray)\n * //=> 1\n */\n\nexport default function closestIndexTo(dirtyDateToCompare, dirtyDatesArray) {\n  requiredArgs(2, arguments);\n  var dateToCompare = toDate(dirtyDateToCompare);\n\n  if (isNaN(dateToCompare)) {\n    return NaN;\n  }\n\n  var timeToCompare = dateToCompare.getTime();\n  var datesArray; // `dirtyDatesArray` is undefined or null\n\n  if (dirtyDatesArray == null) {\n    datesArray = []; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n  } else if (typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array\n  } else {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  }\n\n  var result;\n  var minDistance;\n  datesArray.forEach(function (dirtyDate, index) {\n    var currentDate = toDate(dirtyDate);\n\n    if (isNaN(currentDate)) {\n      result = NaN;\n      minDistance = NaN;\n      return;\n    }\n\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\n\n    if (result == null || distance < minDistance) {\n      result = index;\n      minDistance = distance;\n    }\n  });\n  return result;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name closestTo\n * @category Common Helpers\n * @summary Return a date from the array closest to the given date.\n *\n * @description\n * Return a date from the array closest to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now, `closestTo` doesn't throw an exception\n *   when the second argument is not an array, and returns Invalid Date instead.\n *\n * @param {Date|Number} dateToCompare - the date to compare with\n * @param {Date[]|Number[]} datesArray - the array to search\n * @returns {Date} the date from the array closest to the given date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\n * var dateToCompare = new Date(2015, 8, 6)\n * var result = closestTo(dateToCompare, [\n *   new Date(2000, 0, 1),\n *   new Date(2030, 0, 1)\n * ])\n * //=> Tue Jan 01 2030 00:00:00\n */\n\nexport default function closestTo(dirtyDateToCompare, dirtyDatesArray) {\n  requiredArgs(2, arguments);\n  var dateToCompare = toDate(dirtyDateToCompare);\n\n  if (isNaN(dateToCompare)) {\n    return new Date(NaN);\n  }\n\n  var timeToCompare = dateToCompare.getTime();\n  var datesArray; // `dirtyDatesArray` is undefined or null\n\n  if (dirtyDatesArray == null) {\n    datesArray = []; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n  } else if (typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array\n  } else {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  }\n\n  var result;\n  var minDistance;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate);\n\n    if (isNaN(currentDate)) {\n      result = new Date(NaN);\n      minDistance = NaN;\n      return;\n    }\n\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\n\n    if (result == null || distance < minDistance) {\n      result = currentDate;\n      minDistance = distance;\n    }\n  });\n  return result;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * var result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * var result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name compareDesc\n * @category Common Helpers\n * @summary Compare the two dates reverse chronologically and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return -1 if the first date is after the second,\n * 1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:\n * var result = compareDesc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> 1\n *\n * @example\n * // Sort the array of dates in reverse chronological order:\n * var result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareDesc)\n * //=> [\n * //   Sun Jul 02 1995 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Wed Feb 11 1987 00:00:00\n * // ]\n */\n\nexport default function compareDesc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff > 0) {\n    return -1;\n  } else if (diff < 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * var result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return !isNaN(date);\n}","import startOfDay from '../startOfDay/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day?\n *\n * @description\n * Are the given dates in the same day?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n */\n\nexport default function isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}","import isValid from '../isValid/index.js';\nimport isWeekend from '../isWeekend/index.js';\nimport toDate from '../toDate/index.js';\nimport differenceInCalendarDays from '../differenceInCalendarDays/index.js';\nimport addDays from '../addDays/index.js';\nimport isSameDay from '../isSameDay/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInBusinessDays\n * @category Day Helpers\n * @summary Get the number of business days between the given dates.\n *\n * @description\n * Get the number of business day periods between the given dates.\n * Business days being days that arent in the weekend.\n * Like `differenceInCalendarDays`, the function removes the times from\n * the dates before calculating the difference.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of business days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many business days are between\n * // 10 January 2014 and 20 July 2014?\n * var result = differenceInBusinessDays(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 0, 10)\n * )\n * //=> 136\n */\n\nexport default function differenceInBusinessDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  if (!isValid(dateLeft) || !isValid(dateRight)) return new Date(NaN);\n  var calendarDifference = differenceInCalendarDays(dateLeft, dateRight);\n  var sign = calendarDifference < 0 ? -1 : 1;\n  var weeks = toInteger(calendarDifference / 7);\n  var result = weeks * 5;\n  dateRight = addDays(dateRight, weeks * 7); // the loop below will run at most 6 times to account for the remaining days that don't makeup a full week\n\n  while (!isSameDay(dateLeft, dateRight)) {\n    // sign is used to account for both negative and positive differences\n    result += isWeekend(dateRight) ? 0 : sign;\n    dateRight = addDays(dateRight, sign);\n  }\n\n  return result === 0 ? 0 : result;\n}","import getISOWeekYear from '../getISOWeekYear/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInCalendarISOWeekYears\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the number of calendar ISO week-numbering years between the given dates.\n *\n * @description\n * Get the number of calendar ISO week-numbering years between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `differenceInCalendarISOYears` to `differenceInCalendarISOWeekYears`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `addWeekYears`.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar ISO week-numbering years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar ISO week-numbering years are 1 January 2010 and 1 January 2012?\n * var result = differenceInCalendarISOWeekYears(\n *   new Date(2012, 0, 1),\n *   new Date(2010, 0, 1)\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarISOWeekYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  return getISOWeekYear(dirtyDateLeft) - getISOWeekYear(dirtyDateRight);\n}","import getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport startOfISOWeek from '../startOfISOWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name differenceInCalendarISOWeeks\n * @category ISO Week Helpers\n * @summary Get the number of calendar ISO weeks between the given dates.\n *\n * @description\n * Get the number of calendar ISO weeks between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar ISO weeks\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?\n * var result = differenceInCalendarISOWeeks(\n *   new Date(2014, 6, 21),\n *   new Date(2014, 6, 6)\n * )\n * //=> 3\n */\n\nexport default function differenceInCalendarISOWeeks(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfISOWeekLeft = startOfISOWeek(dirtyDateLeft);\n  var startOfISOWeekRight = startOfISOWeek(dirtyDateRight);\n  var timestampLeft = startOfISOWeekLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfISOWeekLeft);\n  var timestampRight = startOfISOWeekRight.getTime() - getTimezoneOffsetInMilliseconds(startOfISOWeekRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getQuarter\n * @category Quarter Helpers\n * @summary Get the year quarter of the given date.\n *\n * @description\n * Get the year quarter of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which quarter is 2 July 2014?\n * var result = getQuarter(new Date(2014, 6, 2))\n * //=> 3\n */\n\nexport default function getQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var quarter = Math.floor(date.getMonth() / 3) + 1;\n  return quarter;\n}","import getQuarter from '../getQuarter/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInCalendarQuarters\n * @category Quarter Helpers\n * @summary Get the number of calendar quarters between the given dates.\n *\n * @description\n * Get the number of calendar quarters between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar quarters\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar quarters are between 31 December 2013 and 2 July 2014?\n * var result = differenceInCalendarQuarters(\n *   new Date(2014, 6, 2),\n *   new Date(2013, 11, 31)\n * )\n * //=> 3\n */\n\nexport default function differenceInCalendarQuarters(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var quarterDiff = getQuarter(dateLeft) - getQuarter(dateRight);\n  return yearDiff * 4 + quarterDiff;\n}","import startOfWeek from '../startOfWeek/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name differenceInCalendarWeeks\n * @category Week Helpers\n * @summary Get the number of calendar weeks between the given dates.\n *\n * @description\n * Get the number of calendar weeks between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Number} the number of calendar weeks\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\n * var result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5)\n * )\n * //=> 3\n *\n * @example\n * // If the week starts on Monday,\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\n * var result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5),\n *   { weekStartsOn: 1 }\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarWeeks(dirtyDateLeft, dirtyDateRight, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var startOfWeekLeft = startOfWeek(dirtyDateLeft, dirtyOptions);\n  var startOfWeekRight = startOfWeek(dirtyDateRight, dirtyOptions);\n  var timestampLeft = startOfWeekLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekLeft);\n  var timestampRight = startOfWeekRight.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * var result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() - dateRight.getFullYear();\n}","import toDate from '../toDate/index.js';\nimport differenceInCalendarDays from '../differenceInCalendarDays/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js'; // Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\n\nfunction compareLocalAsc(dateLeft, dateRight) {\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full days according to the local timezone\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * var result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * var result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n//=> 92\n */\n\n\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareLocalAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));\n  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastDayNotFull = compareLocalAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * var result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getTime() - dateRight.getTime();\n}","import differenceInMilliseconds from '../differenceInMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of hours\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * var result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\n\nexport default function differenceInHours(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_HOUR;\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addISOWeekYears from '../addISOWeekYears/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subISOWeekYears\n * @category ISO Week-Numbering Year Helpers\n * @summary Subtract the specified number of ISO week-numbering years from the given date.\n *\n * @description\n * Subtract the specified number of ISO week-numbering years from the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `subISOYears` to `subISOWeekYears`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `setWeekYear`.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of ISO week-numbering years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the ISO week-numbering years subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 ISO week-numbering years from 1 September 2014:\n * var result = subISOWeekYears(new Date(2014, 8, 1), 5)\n * //=> Mon Aug 31 2009 00:00:00\n */\n\nexport default function subISOWeekYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addISOWeekYears(dirtyDate, -amount);\n}","import toDate from '../toDate/index.js';\nimport differenceInCalendarISOWeekYears from '../differenceInCalendarISOWeekYears/index.js';\nimport compareAsc from '../compareAsc/index.js';\nimport subISOWeekYears from '../subISOWeekYears/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInISOWeekYears\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the number of full ISO week-numbering years between the given dates.\n *\n * @description\n * Get the number of full ISO week-numbering years between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `differenceInISOYears` to `differenceInISOWeekYears`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `addWeekYears`.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full ISO week-numbering years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full ISO week-numbering years are between 1 January 2010 and 1 January 2012?\n * var result = differenceInISOWeekYears(\n *   new Date(2012, 0, 1),\n *   new Date(2010, 0, 1)\n * )\n * //=> 1\n */\n\nexport default function differenceInISOWeekYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarISOWeekYears(dateLeft, dateRight));\n  dateLeft = subISOWeekYears(dateLeft, sign * difference); // Math.abs(diff in full ISO years - diff in calendar ISO years) === 1\n  // if last calendar ISO year is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastISOWeekYearNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - isLastISOWeekYearNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import differenceInMilliseconds from '../differenceInMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_MINUTE = 60000;\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of minutes\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * var result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are from 10:01:59 to 10:00:00\n * var result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\n\nexport default function differenceInMinutes(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_MINUTE;\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);\n}","import toDate from '../toDate/index.js';\nimport differenceInCalendarMonths from '../differenceInCalendarMonths/index.js';\nimport compareAsc from '../compareAsc/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - isLastMonthNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import differenceInMonths from '../differenceInMonths/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInQuarters\n * @category Quarter Helpers\n * @summary Get the number of full quarters between the given dates.\n *\n * @description\n * Get the number of full quarters between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full quarters\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full quarters are between 31 December 2013 and 2 July 2014?\n * var result = differenceInQuarters(new Date(2014, 6, 2), new Date(2013, 11, 31))\n * //=> 2\n */\n\nexport default function differenceInQuarters(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMonths(dirtyDateLeft, dirtyDateRight) / 3;\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);\n}","import differenceInMilliseconds from '../differenceInMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * var result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\n\nexport default function differenceInSeconds(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / 1000;\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);\n}","import differenceInDays from '../differenceInDays/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInWeeks\n * @category Week Helpers\n * @summary Get the number of full weeks between the given dates.\n *\n * @description\n * Get the number of full weeks between two dates. Fractional weeks are\n * truncated towards zero.\n *\n * One \"full week\" is the distance between a local time in one day to the same\n * local time 7 days earlier or later. A full week can sometimes be less than\n * or more than 7*24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 7*24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/(7*24))|0`.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full weeks\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full weeks are between 5 July 2014 and 20 July 2014?\n * var result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))\n * //=> 2\n *\n * // How many full weeks are between\n * // 1 March 2020 0:00 and 6 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 8 weeks (54 days),\n * // even if DST starts and the period has\n * // only 54*24-1 hours.\n * var result = differenceInWeeks(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 6)\n * )\n * //=> 8\n */\n\nexport default function differenceInWeeks(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var diff = differenceInDays(dirtyDateLeft, dirtyDateRight) / 7;\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);\n}","import toDate from '../toDate/index.js';\nimport differenceInCalendarYears from '../differenceInCalendarYears/index.js';\nimport compareAsc from '../compareAsc/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInYears\n * @category Year Helpers\n * @summary Get the number of full years between the given dates.\n *\n * @description\n * Get the number of full years between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full years are between 31 December 2013 and 11 February 2015?\n * var result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\n * //=> 1\n */\n\nexport default function differenceInYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight)); // Set both dates to a valid leap year for accurate comparison when dealing\n  // with leap days\n\n  dateLeft.setFullYear('1584');\n  dateRight.setFullYear('1584'); // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - isLastYearNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachDayOfInterval\n * @category Interval Helpers\n * @summary Return the array of dates within the specified time interval.\n *\n * @description\n * Return the array of dates within the specified time interval.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `eachDay` to `eachDayOfInterval`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   eachDay(new Date(2014, 0, 10), new Date(2014, 0, 20))\n *\n *   // v2.0.0 onward\n *\n *   eachDayOfInterval(\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) }\n *   )\n *   ```\n *\n * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\n * @returns {Date[]} the array with starts of days from the day of the interval start to the day of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.step` must be a number greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each day between 6 October 2014 and 10 October 2014:\n * var result = eachDayOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 9, 10)\n * })\n * //=> [\n * //   Mon Oct 06 2014 00:00:00,\n * //   Tue Oct 07 2014 00:00:00,\n * //   Wed Oct 08 2014 00:00:00,\n * //   Thu Oct 09 2014 00:00:00,\n * //   Fri Oct 10 2014 00:00:00\n * // ]\n */\n\nexport default function eachDayOfInterval(dirtyInterval, options) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setDate(currentDate.getDate() + step);\n    currentDate.setHours(0, 0, 0, 0);\n  }\n\n  return dates;\n}","import addHours from '../addHours/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachHourOfInterval\n * @category Interval Helpers\n * @summary Return the array of hours within the specified time interval.\n *\n * @description\n * Return the array of hours within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\n * @returns {Date[]} the array with starts of hours from the hour of the interval start to the hour of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.step` must be a number greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each hour between 6 October 2014, 12:00 and 10 October 2014, 15:00\n * var result = eachHourOfInterval({\n *   start: new Date(2014, 9, 6, 12),\n *   end: new Date(2014, 9, 6, 15)\n * })\n * //=> [\n * //   Mon Oct 06 2014 12:00:00,\n * //   Mon Oct 06 2014 13:00:00,\n * //   Mon Oct 06 2014 14:00:00,\n * //   Mon Oct 06 2014 15:00:00\n * // ]\n */\n\nexport default function eachHourOfInterval(dirtyInterval, options) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var startTime = startDate.getTime();\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setMinutes(0, 0, 0);\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addHours(currentDate, step);\n  }\n\n  return dates;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachMonthOfInterval\n * @category Interval Helpers\n * @summary Return the array of months within the specified time interval.\n *\n * @description\n * Return the array of months within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}\n * @returns {Date[]} the array with starts of months from the month of the interval start to the month of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each month between 6 February 2014 and 10 August 2014:\n * var result = eachMonthOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10)\n * })\n * //=> [\n * //   Sat Feb 01 2014 00:00:00,\n * //   Sat Mar 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Thu May 01 2014 00:00:00,\n * //   Sun Jun 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * //   Fri Aug 01 2014 00:00:00\n * // ]\n */\n\nexport default function eachMonthOfInterval(dirtyInterval) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setDate(1);\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setMonth(currentDate.getMonth() + 1);\n  }\n\n  return dates;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfQuarter\n * @category Quarter Helpers\n * @summary Return the start of a year quarter for the given date.\n *\n * @description\n * Return the start of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a quarter for 2 September 2014 11:55:00:\n * var result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Jul 01 2014 00:00:00\n */\n\nexport default function startOfQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var currentMonth = date.getMonth();\n  var month = currentMonth - currentMonth % 3;\n  date.setMonth(month, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import addQuarters from '../addQuarters/index.js';\nimport startOfQuarter from '../startOfQuarter/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachQuarterOfInterval\n * @category Interval Helpers\n * @summary Return the array of quarters within the specified time interval.\n *\n * @description\n * Return the array of quarters within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}\n * @returns {Date[]} the array with starts of quarters from the quarter of the interval start to the quarter of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each quarter within interval 6 February 2014 - 10 August 2014:\n * var result = eachQuarterOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10)\n * })\n * //=> [\n * //   Wed Jan 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * // ]\n */\n\nexport default function eachQuarterOfInterval(dirtyInterval) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var startDateQuarter = startOfQuarter(startDate);\n  var endDateQuarter = startOfQuarter(endDate);\n  endTime = endDateQuarter.getTime();\n  var quarters = [];\n  var currentQuarter = startDateQuarter;\n\n  while (currentQuarter.getTime() <= endTime) {\n    quarters.push(toDate(currentQuarter));\n    currentQuarter = addQuarters(currentQuarter, 1);\n  }\n\n  return quarters;\n}","import addWeeks from '../addWeeks/index.js';\nimport startOfWeek from '../startOfWeek/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachWeekOfInterval\n * @category Interval Helpers\n * @summary Return the array of weeks within the specified time interval.\n *\n * @description\n * Return the array of weeks within the specified time interval.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date[]} the array with starts of weeks from the week of the interval start to the week of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be 0, 1, ..., 6\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each week within interval 6 October 2014 - 23 November 2014:\n * var result = eachWeekOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 10, 23)\n * })\n * //=> [\n * //   Sun Oct 05 2014 00:00:00,\n * //   Sun Oct 12 2014 00:00:00,\n * //   Sun Oct 19 2014 00:00:00,\n * //   Sun Oct 26 2014 00:00:00,\n * //   Sun Nov 02 2014 00:00:00,\n * //   Sun Nov 09 2014 00:00:00,\n * //   Sun Nov 16 2014 00:00:00,\n * //   Sun Nov 23 2014 00:00:00\n * // ]\n */\n\nexport default function eachWeekOfInterval(dirtyInterval, options) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var startDateWeek = startOfWeek(startDate, options);\n  var endDateWeek = startOfWeek(endDate, options); // Some timezones switch DST at midnight, making start of day unreliable in these timezones, 3pm is a safe bet\n\n  startDateWeek.setHours(15);\n  endDateWeek.setHours(15);\n  endTime = endDateWeek.getTime();\n  var weeks = [];\n  var currentWeek = startDateWeek;\n\n  while (currentWeek.getTime() <= endTime) {\n    currentWeek.setHours(0);\n    weeks.push(toDate(currentWeek));\n    currentWeek = addWeeks(currentWeek, 1);\n    currentWeek.setHours(15);\n  }\n\n  return weeks;\n}","import eachDayOfInterval from '../eachDayOfInterval/index.js';\nimport isSunday from '../isSunday/index.js';\nimport isWeekend from '../isWeekend/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachWeekendOfInterval\n * @category Interval Helpers\n * @summary List all the Saturdays and Sundays in the given date interval.\n *\n * @description\n * Get all the Saturdays and Sundays in the given date interval.\n *\n * @param {Interval} interval - the given interval. See [Interval]{@link docs/types/Interval}\n * @returns {Date[]} an array containing all the Saturdays and Sundays\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Lists all Saturdays and Sundays in the given date interval\n * var result = eachWeekendOfInterval({\n *   start: new Date(2018, 8, 17),\n *   end: new Date(2018, 8, 30)\n * })\n * //=> [\n * //   Sat Sep 22 2018 00:00:00,\n * //   Sun Sep 23 2018 00:00:00,\n * //   Sat Sep 29 2018 00:00:00,\n * //   Sun Sep 30 2018 00:00:00\n * // ]\n */\n\nexport default function eachWeekendOfInterval(interval) {\n  requiredArgs(1, arguments);\n  var dateInterval = eachDayOfInterval(interval);\n  var weekends = [];\n  var index = 0;\n\n  while (index < dateInterval.length) {\n    var date = dateInterval[index++];\n\n    if (isWeekend(date)) {\n      weekends.push(date);\n      if (isSunday(date)) index = index + 5;\n    }\n  }\n\n  return weekends;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * var result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * var result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import eachWeekendOfInterval from '../eachWeekendOfInterval/index.js';\nimport startOfMonth from '../startOfMonth/index.js';\nimport endOfMonth from '../endOfMonth/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachWeekendOfMonth\n * @category Month Helpers\n * @summary List all the Saturdays and Sundays in the given month.\n *\n * @description\n * Get all the Saturdays and Sundays in the given month.\n *\n * @param {Date|Number} date - the given month\n * @returns {Date[]} an array containing all the Saturdays and Sundays\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The passed date is invalid\n *\n * @example\n * // Lists all Saturdays and Sundays in the given month\n * var result = eachWeekendOfMonth(new Date(2022, 1, 1))\n * //=> [\n * //   Sat Feb 05 2022 00:00:00,\n * //   Sun Feb 06 2022 00:00:00,\n * //   Sat Feb 12 2022 00:00:00,\n * //   Sun Feb 13 2022 00:00:00,\n * //   Sat Feb 19 2022 00:00:00,\n * //   Sun Feb 20 2022 00:00:00,\n * //   Sat Feb 26 2022 00:00:00,\n * //   Sun Feb 27 2022 00:00:00\n * // ]\n */\n\nexport default function eachWeekendOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var startDate = startOfMonth(dirtyDate);\n  if (isNaN(startDate)) throw new RangeError('The passed date is invalid');\n  var endDate = endOfMonth(dirtyDate);\n  return eachWeekendOfInterval({\n    start: startDate,\n    end: endDate\n  });\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * var result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\n\nexport default function startOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var cleanDate = toDate(dirtyDate);\n  var date = new Date(0);\n  date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfYear\n * @category Year Helpers\n * @summary Return the end of a year for the given date.\n *\n * @description\n * Return the end of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a year for 2 September 2014 11:55:00:\n * var result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Dec 31 2014 23:59:59.999\n */\n\nexport default function endOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  date.setFullYear(year + 1, 0, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import eachWeekendOfInterval from '../eachWeekendOfInterval/index.js';\nimport startOfYear from '../startOfYear/index.js';\nimport endOfYear from '../endOfYear/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachWeekendOfYear\n * @category Year Helpers\n * @summary List all the Saturdays and Sundays in the year.\n *\n * @description\n * Get all the Saturdays and Sundays in the year.\n *\n * @param {Date|Number} date - the given year\n * @returns {Date[]} an array containing all the Saturdays and Sundays\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The passed date is invalid\n *\n * @example\n * // Lists all Saturdays and Sundays in the year\n * var result = eachWeekendOfYear(new Date(2020, 1, 1))\n * //=> [\n * //   Sat Jan 03 2020 00:00:00,\n * //   Sun Jan 04 2020 00:00:00,\n * //   ...\n * //   Sun Dec 27 2020 00:00:00\n * // ]\n * ]\n */\n\nexport default function eachWeekendOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var startDate = startOfYear(dirtyDate);\n  if (isNaN(startDate)) throw new RangeError('The passed date is invalid');\n  var endDate = endOfYear(dirtyDate);\n  return eachWeekendOfInterval({\n    start: startDate,\n    end: endDate\n  });\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachYearOfInterval\n * @category Interval Helpers\n * @summary Return the array of yearly timestamps within the specified time interval.\n *\n * @description\n * Return the array of yearly timestamps within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}\n * @returns {Date[]} the array with starts of yearly timestamps from the month of the interval start to the month of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each year between 6 February 2014 and 10 August 2017:\n * var result = eachYearOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2017, 7, 10)\n * })\n * //=> [\n * //   Wed Jan 01 2014 00:00:00,\n * //   Thu Jan 01 2015 00:00:00,\n * //   Fri Jan 01 2016 00:00:00,\n * //   Sun Jan 01 2017 00:00:00\n * // ]\n */\n\nexport default function eachYearOfInterval(dirtyInterval) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setMonth(0, 1);\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setFullYear(currentDate.getFullYear() + 1);\n  }\n\n  return dates;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * var result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\n\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfDecade\n * @category Decade Helpers\n * @summary Return the end of a decade for the given date.\n *\n * @description\n * Return the end of a decade for the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a decade\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // The end of a decade for 12 May 1984 00:00:00:\n * var result = endOfDecade(new Date(1984, 4, 12, 00, 00, 00))\n * //=> Dec 31 1989 23:59:59.999\n */\n\nexport default function endOfDecade(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var decade = 9 + Math.floor(year / 10) * 10;\n  date.setFullYear(decade, 11, 31);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfHour\n * @category Hour Helpers\n * @summary Return the end of an hour for the given date.\n *\n * @description\n * Return the end of an hour for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of an hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of an hour for 2 September 2014 11:55:00:\n * var result = endOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:59:59.999\n */\n\nexport default function endOfHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMinutes(59, 59, 999);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfWeek\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the end of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 23:59:59.999\n */\n\nexport default function endOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setDate(date.getDate() + diff);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import endOfWeek from '../endOfWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the end of an ISO week for the given date.\n *\n * @description\n * Return the end of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of an ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of an ISO week for 2 September 2014 11:55:00:\n * var result = endOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Sep 07 2014 23:59:59.999\n */\n\nexport default function endOfISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  return endOfWeek(dirtyDate, {\n    weekStartsOn: 1\n  });\n}","import getISOWeekYear from '../getISOWeekYear/index.js';\nimport startOfISOWeek from '../startOfISOWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the end of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the end of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `endOfISOYear` to `endOfISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `addWeekYears`.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of an ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of an ISO week-numbering year for 2 July 2005:\n * var result = endOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Sun Jan 01 2006 23:59:59.999\n */\n\nexport default function endOfISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getISOWeekYear(dirtyDate);\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  var date = startOfISOWeek(fourthOfJanuaryOfNextYear);\n  date.setMilliseconds(date.getMilliseconds() - 1);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfMinute\n * @category Minute Helpers\n * @summary Return the end of a minute for the given date.\n *\n * @description\n * Return the end of a minute for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a minute\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a minute for 1 December 2014 22:15:45.400:\n * var result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:59.999\n */\n\nexport default function endOfMinute(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setSeconds(59, 999);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfQuarter\n * @category Quarter Helpers\n * @summary Return the end of a year quarter for the given date.\n *\n * @description\n * Return the end of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a quarter for 2 September 2014 11:55:00:\n * var result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var currentMonth = date.getMonth();\n  var month = currentMonth - currentMonth % 3 + 3;\n  date.setMonth(month, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfSecond\n * @category Second Helpers\n * @summary Return the end of a second for the given date.\n *\n * @description\n * Return the end of a second for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a second\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a second for 1 December 2014 22:15:45.400:\n * var result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:45.999\n */\n\nexport default function endOfSecond(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMilliseconds(999);\n  return date;\n}","import endOfDay from '../endOfDay/index.js';\n/**\n * @name endOfToday\n * @category Day Helpers\n * @summary Return the end of today.\n * @pure false\n *\n * @description\n * Return the end of today.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the end of today\n *\n * @example\n * // If today is 6 October 2014:\n * var result = endOfToday()\n * //=> Mon Oct 6 2014 23:59:59.999\n */\n\nexport default function endOfToday() {\n  return endOfDay(Date.now());\n}","/**\n * @name endOfTomorrow\n * @category Day Helpers\n * @summary Return the end of tomorrow.\n * @pure false\n *\n * @description\n * Return the end of tomorrow.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `new Date()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the end of tomorrow\n *\n * @example\n * // If today is 6 October 2014:\n * var result = endOfTomorrow()\n * //=> Tue Oct 7 2014 23:59:59.999\n */\nexport default function endOfTomorrow() {\n  var now = new Date();\n  var year = now.getFullYear();\n  var month = now.getMonth();\n  var day = now.getDate();\n  var date = new Date(0);\n  date.setFullYear(year, month, day + 1);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","/**\n * @name endOfYesterday\n * @category Day Helpers\n * @summary Return the end of yesterday.\n * @pure false\n *\n * @description\n * Return the end of yesterday.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `new Date()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the end of yesterday\n *\n * @example\n * // If today is 6 October 2014:\n * var result = endOfYesterday()\n * //=> Sun Oct 5 2014 23:59:59.999\n */\nexport default function endOfYesterday() {\n  var now = new Date();\n  var year = now.getFullYear();\n  var month = now.getMonth();\n  var day = now.getDate();\n  var date = new Date(0);\n  date.setFullYear(year, month, day - 1);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXWeeks: {\n    one: 'about 1 week',\n    other: 'about {{count}} weeks'\n  },\n  xWeeks: {\n    one: '1 week',\n    other: '{{count}} weeks'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\nexport default function formatDistance(token, count, options) {\n  options = options || {};\n  var result;\n\n  if (typeof formatDistanceLocale[token] === 'string') {\n    result = formatDistanceLocale[token];\n  } else if (count === 1) {\n    result = formatDistanceLocale[token].one;\n  } else {\n    result = formatDistanceLocale[token].other.replace('{{count}}', count);\n  }\n\n  if (options.addSuffix) {\n    if (options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n}","export default function buildFormatLongFn(args) {\n  return function (dirtyOptions) {\n    var options = dirtyOptions || {};\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}","import buildFormatLongFn from '../../../_lib/buildFormatLongFn/index.js';\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","export default function buildMatchPatternFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var matchResult = string.match(args.matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n\n    if (!parseResult) {\n      return null;\n    }\n\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\nexport default function formatRelative(token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n}","export default function buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;\n    return valuesArray[index];\n  };\n}","export default function buildMatchFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var value;\n\n    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {\n      value = findIndex(parsePatterns, function (pattern) {\n        return pattern.test(matchedString);\n      });\n    } else {\n      value = findKey(parsePatterns, function (pattern) {\n        return pattern.test(matchedString);\n      });\n    }\n\n    value = args.valueCallback ? args.valueCallback(value) : value;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n}","import formatDistance from './_lib/formatDistance/index.js';\nimport formatLong from './_lib/formatLong/index.js';\nimport formatRelative from './_lib/formatRelative/index.js';\nimport localize from './_lib/localize/index.js';\nimport match from './_lib/match/index.js';\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\n\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","import buildLocalizeFn from '../../../_lib/buildLocalizeFn/index.js';\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.\n  // If you are making a new locale based on this one, check if the same is true for the language you're working on.\n  // Generally, formatted dates should look like they are in the middle of a sentence,\n  // e.g. in Spanish language the weekdays and months should be in the lowercase.\n\n};\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nfunction ordinalNumber(dirtyNumber, _dirtyOptions) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`:\n  //\n  //   var options = dirtyOptions || {}\n  //   var unit = String(options.unit)\n  //\n  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n}\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return Number(quarter) - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","import buildMatchPatternFn from '../../../_lib/buildMatchPatternFn/index.js';\nimport buildMatchFn from '../../../_lib/buildMatchFn/index.js';\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","import toInteger from '../_lib/toInteger/index.js';\nimport addMilliseconds from '../addMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","import addLeadingZeros from '../../addLeadingZeros/index.js';\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function (date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function (date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function (date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function (date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n      case 'aaa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function (date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function (date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function (date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","import toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js';\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","import toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../../toDate/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import getUTCISOWeekYear from '../getUTCISOWeekYear/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}","import toDate from '../../toDate/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js';\nimport startOfUTCISOWeekYear from '../startOfUTCISOWeekYear/index.js';\nimport requiredArgs from '../requiredArgs/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate, dirtyOptions);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import toInteger from '../toInteger/index.js';\nimport getUTCWeekYear from '../getUTCWeekYear/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}","import toDate from '../../toDate/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js';\nimport startOfUTCWeekYear from '../startOfUTCWeekYear/index.js';\nimport requiredArgs from '../requiredArgs/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import lightFormatters from '../lightFormatters/index.js';\nimport getUTCDayOfYear from '../../../_lib/getUTCDayOfYear/index.js';\nimport getUTCISOWeek from '../../../_lib/getUTCISOWeek/index.js';\nimport getUTCISOWeekYear from '../../../_lib/getUTCISOWeekYear/index.js';\nimport getUTCWeek from '../../../_lib/getUTCWeek/index.js';\nimport getUTCWeekYear from '../../../_lib/getUTCWeekYear/index.js';\nimport addLeadingZeros from '../../addLeadingZeros/index.js';\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n  /*\n   * |     | Unit                           |     | Unit                           |\n   * |-----|--------------------------------|-----|--------------------------------|\n   * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n   * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n   * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n   * |  d  | Day of month                   |  D  | Day of year                    |\n   * |  e  | Local day of week              |  E  | Day of week                    |\n   * |  f  |                                |  F* | Day of week in month           |\n   * |  g* | Modified Julian day            |  G  | Era                            |\n   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n   * |  i! | ISO day of week                |  I! | ISO week of year               |\n   * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n   * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n   * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n   * |  m  | Minute                         |  M  | Month                          |\n   * |  n  |                                |  N  |                                |\n   * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n   * |  p! | Long localized time            |  P! | Long localized date            |\n   * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n   * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n   * |  s  | Second                         |  S  | Fraction of second             |\n   * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n   * |  u  | Extended year                  |  U* | Cyclic year                    |\n   * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n   * |  w  | Local week of year             |  W* | Week of month                  |\n   * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n   * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n   * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n   *\n   * Letters marked by * are not implemented but reserved by Unicode standard.\n   *\n   * Letters marked by ! are non-standard, but implemented by date-fns:\n   * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n   * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n   *   i.e. 7 for Sunday, 1 for Monday, etc.\n   * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n   * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n   *   `R` is supposed to be used in conjunction with `I` and `i`\n   *   for universal ISO week-numbering date, whereas\n   *   `Y` is supposed to be used in conjunction with `w` and `e`\n   *   for week-numbering date specific to the locale.\n   * - `P` is long localized date format\n   * - `p` is long localized time format\n   */\n\n};\nvar formatters = {\n  // Era\n  G: function (date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function (date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function (date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function (date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function (date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function (date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function (date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nexport default formatters;","function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/);\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nexport default longFormatters;","var protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nexport function throwProtectedError(token, format, input) {\n  if (token === 'YYYY') {\n    throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'YY') {\n    throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'D') {\n    throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'DD') {\n    throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  }\n}","import isValid from '../isValid/index.js';\nimport defaultLocale from '../locale/en-US/index.js';\nimport subMilliseconds from '../subMilliseconds/index.js';\nimport toDate from '../toDate/index.js';\nimport formatters from '../_lib/format/formatters/index.js';\nimport longFormatters from '../_lib/format/longFormatters/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from '../_lib/protectedTokens/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js'; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          | a..aaa  | AM, PM                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 0001, ..., 999               |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 05/29/1453                        | 7     |\n * |                                 | PP      | May 29, 1453                      | 7     |\n * |                                 | PPP     | May 29th, 1453                    | 7     |\n * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |\n * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","export default function assign(target, dirtyObject) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  dirtyObject = dirtyObject || {};\n\n  for (var property in dirtyObject) {\n    if (dirtyObject.hasOwnProperty(property)) {\n      target[property] = dirtyObject[property];\n    }\n  }\n\n  return target;\n}","import assign from '../assign/index.js';\nexport default function cloneObject(dirtyObject) {\n  return assign({}, dirtyObject);\n}","import compareAsc from '../compareAsc/index.js';\nimport differenceInMonths from '../differenceInMonths/index.js';\nimport differenceInSeconds from '../differenceInSeconds/index.js';\nimport defaultLocale from '../locale/en-US/index.js';\nimport toDate from '../toDate/index.js';\nimport cloneObject from '../_lib/cloneObject/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_TWO_MONTHS = 86400;\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWords ` to `formatDistance`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n * - The order of arguments is swapped to make the function\n *   consistent with `differenceIn...` functions.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWords(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *\n *   // v2.0.0 onward\n *\n *   formatDistance(\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *   ```\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * var result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * var result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * var result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistance(dirtyDate, dirtyBaseDate, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = cloneObject(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;\n  var minutes = Math.round((seconds - offsetInSeconds) / 60);\n  var months; // 0 up to 2 mins\n\n  if (minutes < 2) {\n    if (options.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance('lessThanXSeconds', 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance('lessThanXSeconds', 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance('lessThanXSeconds', 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance('halfAMinute', null, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', minutes, localizeOptions);\n      }\n    } // 2 mins up to 0.75 hrs\n\n  } else if (minutes < 45) {\n    return locale.formatDistance('xMinutes', minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance('aboutXHours', 1, localizeOptions); // 1.5 hrs up to 24 hrs\n  } else if (minutes < MINUTES_IN_DAY) {\n    var hours = Math.round(minutes / 60);\n    return locale.formatDistance('aboutXHours', hours, localizeOptions); // 1 day up to 1.75 days\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\n    return locale.formatDistance('xDays', 1, localizeOptions); // 1.75 days up to 30 days\n  } else if (minutes < MINUTES_IN_MONTH) {\n    var days = Math.round(minutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 month up to 2 months\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\n    months = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('aboutXMonths', months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft); // 2 months up to 12 months\n\n  if (months < 12) {\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('xMonths', nearestMonth, localizeOptions); // 1 year up to max Date\n  } else {\n    var monthsSinceStartOfYear = months % 12;\n    var years = Math.floor(months / 12); // N years up to 1 years 3 months\n\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance('aboutXYears', years, localizeOptions); // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance('overXYears', years, localizeOptions); // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance('almostXYears', years + 1, localizeOptions);\n    }\n  }\n}","import getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport compareAsc from '../compareAsc/index.js';\nimport toDate from '../toDate/index.js';\nimport differenceInSeconds from '../differenceInSeconds/index.js';\nimport cloneObject from '../_lib/cloneObject/index.js';\nimport defaultLocale from '../locale/en-US/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_YEAR = 525600;\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWordsStrict` to `formatDistanceStrict`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n * - The order of arguments is swapped to make the function\n *   consistent with `differenceIn...` functions.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(2015, 0, 2),\n *     new Date(2014, 6, 2)\n *   ) //=> '6 months'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(2014, 6, 2),\n *     new Date(2015, 0, 2)\n *   ) //=> '6 months'\n *   ```\n *\n * - `partialMethod` option is renamed to `roundingMethod`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     { partialMethod: 'ceil' }\n *   ) //=> '2 minutes'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { roundingMethod: 'ceil' }\n *   ) //=> '2 minutes'\n *   ```\n *\n * - If `roundingMethod` is not specified, it now defaults to `round` instead of `floor`.\n *\n * - `unit` option now accepts one of the strings:\n *   'second', 'minute', 'hour', 'day', 'month' or 'year' instead of 's', 'm', 'h', 'd', 'M' or 'Y'\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     { unit: 'm' }\n *   )\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { unit: 'minute' }\n *   )\n *   ```\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.roundingMethod` must be 'floor', 'ceil' or 'round'\n * @throws {RangeError} `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * var result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * var result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * var result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * var result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * var result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\nexport default function formatDistanceStrict(dirtyDate, dirtyBaseDate, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain localize.formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = cloneObject(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var roundingMethod = options.roundingMethod == null ? 'round' : String(options.roundingMethod);\n  var roundingMethodFn;\n\n  if (roundingMethod === 'floor') {\n    roundingMethodFn = Math.floor;\n  } else if (roundingMethod === 'ceil') {\n    roundingMethodFn = Math.ceil;\n  } else if (roundingMethod === 'round') {\n    roundingMethodFn = Math.round;\n  } else {\n    throw new RangeError(\"roundingMethod must be 'floor', 'ceil' or 'round'\");\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;\n  var minutes = roundingMethodFn((seconds - offsetInSeconds) / 60);\n  var unit;\n\n  if (options.unit == null) {\n    if (minutes < 1) {\n      unit = 'second';\n    } else if (minutes < 60) {\n      unit = 'minute';\n    } else if (minutes < MINUTES_IN_DAY) {\n      unit = 'hour';\n    } else if (minutes < MINUTES_IN_MONTH) {\n      unit = 'day';\n    } else if (minutes < MINUTES_IN_YEAR) {\n      unit = 'month';\n    } else {\n      unit = 'year';\n    }\n  } else {\n    unit = String(options.unit);\n  } // 0 up to 60 seconds\n\n\n  if (unit === 'second') {\n    return locale.formatDistance('xSeconds', seconds, localizeOptions); // 1 up to 60 mins\n  } else if (unit === 'minute') {\n    return locale.formatDistance('xMinutes', minutes, localizeOptions); // 1 up to 24 hours\n  } else if (unit === 'hour') {\n    var hours = roundingMethodFn(minutes / 60);\n    return locale.formatDistance('xHours', hours, localizeOptions); // 1 up to 30 days\n  } else if (unit === 'day') {\n    var days = roundingMethodFn(minutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 up to 12 months\n  } else if (unit === 'month') {\n    var months = roundingMethodFn(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('xMonths', months, localizeOptions); // 1 year up to max Date\n  } else if (unit === 'year') {\n    var years = roundingMethodFn(minutes / MINUTES_IN_YEAR);\n    return locale.formatDistance('xYears', years, localizeOptions);\n  }\n\n  throw new RangeError(\"unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\");\n}","import distanceInWords from '../formatDistance/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name formatDistanceToNow\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given date and now in words.\n *\n * | Distance to now                                                   | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance to now     | Result               |\n * |---------------------|----------------------|\n * | 0 secs ... 5 secs   | less than 5 seconds  |\n * | 5 secs ... 10 secs  | less than 10 seconds |\n * | 10 secs ... 20 secs | less than 20 seconds |\n * | 20 secs ... 40 secs | half a minute        |\n * | 40 secs ... 60 secs | less than a minute   |\n * | 60 secs ... 90 secs | 1 minute             |\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWordsToNow ` to `formatDistanceToNow`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsToNow(new Date(2014, 6, 2), { addSuffix: true })\n *   //=> 'in 6 months'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceToNow(new Date(2014, 6, 2), { addSuffix: true })\n *   //=> 'in 6 months'\n *   ```\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result specifies if now is earlier or later than the passed date\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * var result = formatDistanceToNow(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * var result = formatDistanceToNow(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * var result = formatDistanceToNow(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in about 1 year'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * var eoLocale = require('date-fns/locale/eo')\n * var result = formatDistanceToNow(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistanceToNow(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  return distanceInWords(dirtyDate, Date.now(), dirtyOptions);\n}","import distanceInStrictWords from '../formatDistanceStrict/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name formatDistanceToNowStrict\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * var result = formatDistanceToNowStrict(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * var result = formatDistanceToNowStrict(\n *   new Date(2015, 0, 1, 0, 0, 15)\n * )\n * //=> '20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * var result = formatDistanceToNowStrict(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in 1 year'\n *\n * @example\n * // If today is 28 January 2015,\n * // what is the distance to 1 January 2015, in months, rounded up??\n * var result = formatDistanceToNowStrict(new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * var eoLocale = require('date-fns/locale/eo')\n * var result = formatDistanceToNowStrict(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> '1 jaro'\n */\n\nexport default function formatDistanceToNowStrict(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  return distanceInStrictWords(dirtyDate, Date.now(), dirtyOptions);\n}","import defaultLocale from '../locale/en-US/index.js';\nvar defaultFormat = ['years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds'];\n/**\n * @name formatDuration\n * @category Common Helpers\n * @summary Formats a duration in human-readable format\n *\n * @description\n * Return human-readable duration string i.e. \"9 months 2 days\"\n *\n * @param {Duration} duration - the duration to format\n * @param {Object} [options] - an object with options.\n\n * @param {string[]} [options.format=['years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds']] - the array of units to format\n * @param {boolean} [options.zero=false] - should be zeros be included in the output?\n * @param {string} [options.delimiter=' '] - delimiter string\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {string} the formatted date string\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Format full duration\n * formatDuration({\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30\n * })\n * //=> '2 years 9 months 1 week 7 days 5 hours 9 minutes 30 seconds\n *\n * @example\n * // Format partial duration\n * formatDuration({ months: 9, days: 2 })\n * //=> '9 months 2 days'\n *\n * @example\n * // Customize the format\n * formatDuration(\n *   {\n *     years: 2,\n *     months: 9,\n *     weeks: 1,\n *     days: 7,\n *     hours: 5,\n *     minutes: 9,\n *     seconds: 30\n *   },\n *   { format: ['months', 'weeks'] }\n * ) === '9 months 1 week'\n *\n * @example\n * // Customize the zeros presence\n * formatDuration({ years: 0, months: 9 })\n * //=> '9 months'\n * formatDuration({ years: 0, months: 9 }, null, { zero: true })\n * //=> '0 years 9 months'\n *\n * @example\n * // Customize the delimiter\n * formatDuration({ years: 2, months: 9, weeks: 3 }, { delimiter: ', ' })\n * //=> '2 years, 9 months, 3 weeks'\n */\n\nexport default function formatDuration(duration) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var format = options.format || defaultFormat;\n  var locale = options.locale || defaultLocale;\n  var zero = options.zero || false;\n  var delimiter = options.delimiter || ' ';\n  var result = format.reduce(function (acc, unit) {\n    var token = \"x\".concat(unit.replace(/(^.)/, function (m) {\n      return m.toUpperCase();\n    }));\n    var addChunk = typeof duration[unit] === 'number' && (zero || duration[unit]);\n    return addChunk ? acc.concat(locale.formatDistance(token, duration[unit])) : acc;\n  }, []).join(delimiter);\n  return result;\n}","import toDate from '../toDate/index.js';\nimport isValid from '../isValid/index.js';\nimport addLeadingZeros from '../_lib/addLeadingZeros/index.js';\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (http://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time with time zone, or both.\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.represenation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\n\nexport default function formatISO(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var options = dirtyOptions || {};\n  var format = options.format == null ? 'extended' : String(options.format);\n  var representation = options.representation == null ? 'complete' : String(options.representation);\n\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n\n  var result = '';\n  var tzOffset = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== 'date') {\n    // Add the timezone.\n    var offset = originalDate.getTimezoneOffset();\n\n    if (offset !== 0) {\n      var absoluteOffset = Math.abs(offset);\n      var hourOffset = addLeadingZeros(Math.floor(absoluteOffset / 60), 2);\n      var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n      var sign = offset < 0 ? '+' : '-';\n      tzOffset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n    } else {\n      tzOffset = 'Z';\n    }\n\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2); // If there's also date, separate it with time with 'T'\n\n    var separator = result === '' ? '' : 'T'; // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n\n    var time = [hour, minute, second].join(timeDelimiter); // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(time).concat(tzOffset);\n  }\n\n  return result;\n}","import toDate from '../toDate/index.js';\nimport isValid from '../isValid/index.js';\nimport addLeadingZeros from '../_lib/addLeadingZeros/index.js';\n/**\n * @name formatISO9075\n * @category Common Helpers\n * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).\n *\n * @description\n * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time, or both.\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.represenation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18 19:00:52'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075, short format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918 190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, date only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, time only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52'\n */\n\nexport default function formatISO9075(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var options = dirtyOptions || {};\n  var format = options.format == null ? 'extended' : String(options.format);\n  var representation = options.representation == null ? 'complete' : String(options.representation);\n\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n\n  var result = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== 'date') {\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2); // If there's also date, separate it with time with a space\n\n    var separator = result === '' ? '' : ' '; // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(hour).concat(timeDelimiter).concat(minute).concat(timeDelimiter).concat(second);\n  }\n\n  return result;\n}","import requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name formatISODuration\n * @category Common Helpers\n * @summary Format a duration object according as ISO 8601 duration string\n *\n * @description\n * Format a duration object according to the ISO 8601 duration standard (https://www.digi.com/resources/documentation/digidocs/90001437-13/reference/r_iso_8601_duration_format.htm)\n *\n * @param {Duration} duration - the duration to format\n *\n * @returns {String} The ISO 8601 duration string\n * @throws {TypeError} Requires 1 argument\n * @throws {Error} Argument must be an object\n *\n * @example\n * // Format the given duration as ISO 8601 string\n * formatISODuration({\n *   years: 39,\n *   months: 2,\n *   days: 20,\n *   hours: 7,\n *   minutes: 5,\n *   seconds: 0\n * })\n * //=> 'P39Y2M20DT0H0M0S'\n */\n\nexport default function formatISODuration(duration) {\n  requiredArgs(1, arguments);\n  if (typeof duration !== 'object') throw new Error('Duration must be an object');\n  var _duration$years = duration.years,\n      years = _duration$years === void 0 ? 0 : _duration$years,\n      _duration$months = duration.months,\n      months = _duration$months === void 0 ? 0 : _duration$months,\n      _duration$days = duration.days,\n      days = _duration$days === void 0 ? 0 : _duration$days,\n      _duration$hours = duration.hours,\n      hours = _duration$hours === void 0 ? 0 : _duration$hours,\n      _duration$minutes = duration.minutes,\n      minutes = _duration$minutes === void 0 ? 0 : _duration$minutes,\n      _duration$seconds = duration.seconds,\n      seconds = _duration$seconds === void 0 ? 0 : _duration$seconds;\n  return \"P\".concat(years, \"Y\").concat(months, \"M\").concat(days, \"DT\").concat(hours, \"H\").concat(minutes, \"M\").concat(seconds, \"S\");\n}","import toDate from '../toDate/index.js';\nimport isValid from '../isValid/index.js';\nimport addLeadingZeros from '../_lib/addLeadingZeros/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\n/**\n * @name formatRFC3339\n * @category Common Helpers\n * @summary Format the date according to the ISO 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).\n *\n * @description\n * Return the formatted date string in ISO 3339 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {0|1|2|3} [options.fractionDigits=0] - number of digits after the decimal point after seconds\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.fractionDigits` must be between 0 and 3\n *\n * @example\n * // Represent 18 September 2019 in ISO 3339 format:\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 3339 format, 2 digits of second fraction:\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 2 })\n * //=> '2019-09-18T19:00:52.23Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 3339 format, 3 digits of second fraction\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 3 })\n * //=> '2019-09-18T19:00:52.234Z'\n */\n\nexport default function formatRFC3339(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 arguments required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var options = dirtyOptions || {};\n  var fractionDigits = options.fractionDigits == null ? 0 : toInteger(options.fractionDigits); // Test if fractionDigits is between 0 and 3 _and_ is not NaN\n\n  if (!(fractionDigits >= 0 && fractionDigits <= 3)) {\n    throw new RangeError('fractionDigits must be between 0 and 3 inclusively');\n  }\n\n  var day = addLeadingZeros(originalDate.getDate(), 2);\n  var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n  var year = originalDate.getFullYear();\n  var hour = addLeadingZeros(originalDate.getHours(), 2);\n  var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n  var second = addLeadingZeros(originalDate.getSeconds(), 2);\n  var fractionalSecond = '';\n\n  if (fractionDigits > 0) {\n    var milliseconds = originalDate.getMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, fractionDigits - 3));\n    fractionalSecond = '.' + addLeadingZeros(fractionalSeconds, fractionDigits);\n  }\n\n  var offset = '';\n  var tzOffset = originalDate.getTimezoneOffset();\n\n  if (tzOffset !== 0) {\n    var absoluteOffset = Math.abs(tzOffset);\n    var hourOffset = addLeadingZeros(toInteger(absoluteOffset / 60), 2);\n    var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n    var sign = tzOffset < 0 ? '+' : '-';\n    offset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n  } else {\n    offset = 'Z';\n  }\n\n  return \"\".concat(year, \"-\").concat(month, \"-\").concat(day, \"T\").concat(hour, \":\").concat(minute, \":\").concat(second).concat(fractionalSecond).concat(offset);\n}","import toDate from '../toDate/index.js';\nimport isValid from '../isValid/index.js';\nimport addLeadingZeros from '../_lib/addLeadingZeros/index.js';\nvar days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n/**\n * @name formatRFC7231\n * @category Common Helpers\n * @summary Format the date according to the RFC 7231 standard (https://tools.ietf.org/html/rfc7231#section-7.1.1.1).\n *\n * @description\n * Return the formatted date string in RFC 7231 format.\n * The result will always be in UTC timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in RFC 7231 format:\n * const result = formatRFC7231(new Date(2019, 8, 18, 19, 0, 52))\n * //=> 'Wed, 18 Sep 2019 19:00:52 GMT'\n */\n\nexport default function formatRFC7231(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 arguments required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var dayName = days[originalDate.getUTCDay()];\n  var dayOfMonth = addLeadingZeros(originalDate.getUTCDate(), 2);\n  var monthName = months[originalDate.getUTCMonth()];\n  var year = originalDate.getUTCFullYear();\n  var hour = addLeadingZeros(originalDate.getUTCHours(), 2);\n  var minute = addLeadingZeros(originalDate.getUTCMinutes(), 2);\n  var second = addLeadingZeros(originalDate.getUTCSeconds(), 2); // Result variables.\n\n  return \"\".concat(dayName, \", \").concat(dayOfMonth, \" \").concat(monthName, \" \").concat(year, \" \").concat(hour, \":\").concat(minute, \":\").concat(second, \" GMT\");\n}","import differenceInCalendarDays from '../differenceInCalendarDays/index.js';\nimport format from '../format/index.js';\nimport defaultLocale from '../locale/en-US/index.js';\nimport subMilliseconds from '../subMilliseconds/index.js';\nimport toDate from '../toDate/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name formatRelative\n * @category Common Helpers\n * @summary Represent the date in words relative to the given base date.\n *\n * @description\n * Represent the date in words relative to the given base date.\n *\n * | Distance to the base date | Result                    |\n * |---------------------------|---------------------------|\n * | Previous 6 days           | last Sunday at 04:30 AM   |\n * | Last day                  | yesterday at 04:30 AM     |\n * | Same day                  | today at 04:30 AM         |\n * | Next day                  | tomorrow at 04:30 AM      |\n * | Next 6 days               | Sunday at 04:30 AM        |\n * | Other                     | 12/31/2017                |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to format\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {String} the date in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.locale` must contain `formatRelative` property\n */\n\nexport default function formatRelative(dirtyDate, dirtyBaseDate, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var baseDate = toDate(dirtyBaseDate);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  if (!locale.formatRelative) {\n    throw new RangeError('locale must contain formatRelative property');\n  }\n\n  var diff = differenceInCalendarDays(date, baseDate);\n\n  if (isNaN(diff)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var token;\n\n  if (diff < -6) {\n    token = 'other';\n  } else if (diff < -1) {\n    token = 'lastWeek';\n  } else if (diff < 0) {\n    token = 'yesterday';\n  } else if (diff < 1) {\n    token = 'today';\n  } else if (diff < 2) {\n    token = 'tomorrow';\n  } else if (diff < 7) {\n    token = 'nextWeek';\n  } else {\n    token = 'other';\n  }\n\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));\n  var utcBaseDate = subMilliseconds(baseDate, getTimezoneOffsetInMilliseconds(baseDate));\n  var formatStr = locale.formatRelative(token, utcDate, utcBaseDate, options);\n  return format(date, formatStr, options);\n}","import toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name fromUnixTime\n * @category Timestamp Helpers\n * @summary Create a date from a Unix timestamp.\n *\n * @description\n * Create a date from a Unix timestamp.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Number} unixTime - the given Unix timestamp\n * @returns {Date} the date\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Create the date 29 February 2012 11:45:05:\n * var result = fromUnixTime(1330515905)\n * //=> Wed Feb 29 2012 11:45:05\n */\n\nexport default function fromUnixTime(dirtyUnixTime) {\n  requiredArgs(1, arguments);\n  var unixTime = toInteger(dirtyUnixTime);\n  return toDate(unixTime * 1000);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getDate\n * @category Day Helpers\n * @summary Get the day of the month of the given date.\n *\n * @description\n * Get the day of the month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the day of month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the month is 29 February 2012?\n * var result = getDate(new Date(2012, 1, 29))\n * //=> 29\n */\n\nexport default function getDate(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var dayOfMonth = date.getDate();\n  return dayOfMonth;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getDay\n * @category Weekday Helpers\n * @summary Get the day of the week of the given date.\n *\n * @description\n * Get the day of the week of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {0|1|2|3|4|5|6} the day of week, 0 represents Sunday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the week is 29 February 2012?\n * var result = getDay(new Date(2012, 1, 29))\n * //=> 3\n */\n\nexport default function getDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  return day;\n}","import toDate from '../toDate/index.js';\nimport startOfYear from '../startOfYear/index.js';\nimport differenceInCalendarDays from '../differenceInCalendarDays/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the day of year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * var result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\n\nexport default function getDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = differenceInCalendarDays(date, startOfYear(date));\n  var dayOfYear = diff + 1;\n  return dayOfYear;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getDaysInMonth\n * @category Month Helpers\n * @summary Get the number of days in a month of the given date.\n *\n * @description\n * Get the number of days in a month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of days in a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many days are in February 2000?\n * var result = getDaysInMonth(new Date(2000, 1))\n * //=> 29\n */\n\nexport default function getDaysInMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var monthIndex = date.getMonth();\n  var lastDayOfMonth = new Date(0);\n  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);\n  lastDayOfMonth.setHours(0, 0, 0, 0);\n  return lastDayOfMonth.getDate();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isLeapYear\n * @category Year Helpers\n * @summary Is the given date in the leap year?\n *\n * @description\n * Is the given date in the leap year?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in the leap year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 1 September 2012 in the leap year?\n * var result = isLeapYear(new Date(2012, 8, 1))\n * //=> true\n */\n\nexport default function isLeapYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}","import toDate from '../toDate/index.js';\nimport isLeapYear from '../isLeapYear/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getDaysInYear\n * @category Year Helpers\n * @summary Get the number of days in a year of the given date.\n *\n * @description\n * Get the number of days in a year of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of days in a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many days are in 2012?\n * var result = getDaysInYear(new Date(2012, 0, 1))\n * //=> 366\n */\n\nexport default function getDaysInYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n\n  if (isNaN(date)) {\n    return NaN;\n  }\n\n  return isLeapYear(date) ? 366 : 365;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getDecade\n * @category Decade Helpers\n * @summary Get the decade of the given date.\n *\n * @description\n * Get the decade of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the year of decade\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which decade belongs 27 November 1942?\n * var result = getDecade(new Date(1942, 10, 27))\n * //=> 1940\n */\n\nexport default function getDecade(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var decade = Math.floor(year / 10) * 10;\n  return decade;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getHours\n * @category Hour Helpers\n * @summary Get the hours of the given date.\n *\n * @description\n * Get the hours of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the hours\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the hours of 29 February 2012 11:45:00:\n * var result = getHours(new Date(2012, 1, 29, 11, 45))\n * //=> 11\n */\n\nexport default function getHours(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var hours = date.getHours();\n  return hours;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getISODay\n * @category Weekday Helpers\n * @summary Get the day of the ISO week of the given date.\n *\n * @description\n * Get the day of the ISO week of the given date,\n * which is 7 for Sunday, 1 for Monday etc.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the day of ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the ISO week is 26 February 2012?\n * var result = getISODay(new Date(2012, 1, 26))\n * //=> 7\n */\n\nexport default function getISODay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n\n  if (day === 0) {\n    day = 7;\n  }\n\n  return day;\n}","import toDate from '../toDate/index.js';\nimport startOfISOWeek from '../startOfISOWeek/index.js';\nimport startOfISOWeekYear from '../startOfISOWeekYear/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * var result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\n\nexport default function getISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfISOWeek(date).getTime() - startOfISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import startOfISOWeekYear from '../startOfISOWeekYear/index.js';\nimport addWeeks from '../addWeeks/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name getISOWeeksInYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the number of weeks in an ISO week-numbering year of the given date.\n *\n * @description\n * Get the number of weeks in an ISO week-numbering year of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of ISO weeks in a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many weeks are in ISO week-numbering year 2015?\n * var result = getISOWeeksInYear(new Date(2015, 1, 11))\n * //=> 53\n */\n\nexport default function getISOWeeksInYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var thisYear = startOfISOWeekYear(dirtyDate);\n  var nextYear = startOfISOWeekYear(addWeeks(thisYear, 60));\n  var diff = nextYear.valueOf() - thisYear.valueOf(); // Round the number of weeks to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getMilliseconds\n * @category Millisecond Helpers\n * @summary Get the milliseconds of the given date.\n *\n * @description\n * Get the milliseconds of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the milliseconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the milliseconds of 29 February 2012 11:45:05.123:\n * var result = getMilliseconds(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 123\n */\n\nexport default function getMilliseconds(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var milliseconds = date.getMilliseconds();\n  return milliseconds;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getMinutes\n * @category Minute Helpers\n * @summary Get the minutes of the given date.\n *\n * @description\n * Get the minutes of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the minutes\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the minutes of 29 February 2012 11:45:05:\n * var result = getMinutes(new Date(2012, 1, 29, 11, 45, 5))\n * //=> 45\n */\n\nexport default function getMinutes(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var minutes = date.getMinutes();\n  return minutes;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getMonth\n * @category Month Helpers\n * @summary Get the month of the given date.\n *\n * @description\n * Get the month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which month is 29 February 2012?\n * var result = getMonth(new Date(2012, 1, 29))\n * //=> 1\n */\n\nexport default function getMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  return month;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1000;\n/**\n * @name getOverlappingDaysInIntervals\n * @category Interval Helpers\n * @summary Get the number of days that overlap in two time intervals\n *\n * @description\n * Get the number of days that overlap in two time intervals\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `getOverlappingDaysInRanges` to `getOverlappingDaysInIntervals`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   getOverlappingDaysInRanges(\n *     new Date(2014, 0, 10), new Date(2014, 0, 20),\n *     new Date(2014, 0, 17), new Date(2014, 0, 21)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   getOverlappingDaysInIntervals(\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *     { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n *   )\n *   ```\n *\n * @param {Interval} intervalLeft - the first interval to compare. See [Interval]{@link docs/Interval}\n * @param {Interval} intervalRight - the second interval to compare. See [Interval]{@link docs/Interval}\n * @returns {Number} the number of days that overlap in two time intervals\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For overlapping time intervals adds 1 for each started overlapping day:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping time intervals returns 0:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> 0\n */\n\nexport default function getOverlappingDaysInIntervals(dirtyIntervalLeft, dirtyIntervalRight) {\n  requiredArgs(2, arguments);\n  var intervalLeft = dirtyIntervalLeft || {};\n  var intervalRight = dirtyIntervalRight || {};\n  var leftStartTime = toDate(intervalLeft.start).getTime();\n  var leftEndTime = toDate(intervalLeft.end).getTime();\n  var rightStartTime = toDate(intervalRight.start).getTime();\n  var rightEndTime = toDate(intervalRight.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var isOverlapping = leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n\n  if (!isOverlapping) {\n    return 0;\n  }\n\n  var overlapStartDate = rightStartTime < leftStartTime ? leftStartTime : rightStartTime;\n  var overlapEndDate = rightEndTime > leftEndTime ? leftEndTime : rightEndTime;\n  var differenceInMs = overlapEndDate - overlapStartDate;\n  return Math.ceil(differenceInMs / MILLISECONDS_IN_DAY);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getSeconds\n * @category Second Helpers\n * @summary Get the seconds of the given date.\n *\n * @description\n * Get the seconds of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the seconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the seconds of 29 February 2012 11:45:05.123:\n * var result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 5\n */\n\nexport default function getSeconds(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var seconds = date.getSeconds();\n  return seconds;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getTime\n * @category Timestamp Helpers\n * @summary Get the milliseconds timestamp of the given date.\n *\n * @description\n * Get the milliseconds timestamp of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05.123:\n * var result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 1330515905123\n */\n\nexport default function getTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  return timestamp;\n}","import getTime from '../getTime/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getUnixTime\n * @category Timestamp Helpers\n * @summary Get the seconds timestamp of the given date.\n *\n * @description\n * Get the seconds timestamp of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05 CET:\n * var result = getUnixTime(new Date(2012, 1, 29, 11, 45, 5))\n * //=> 1330512305\n */\n\nexport default function getUnixTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  return Math.floor(getTime(dirtyDate) / 1000);\n}","import startOfWeek from '../startOfWeek/index.js';\nimport toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Number} the local week-numbering year\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * var result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * var result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * var result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\n\nexport default function getWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  var startOfNextYear = startOfWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  var startOfThisYear = startOfWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import getWeekYear from '../getWeekYear/index.js';\nimport startOfWeek from '../startOfWeek/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Date} the start of a week-numbering year\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * var result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * var result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\n\nexport default function startOfWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  var date = startOfWeek(firstWeek, dirtyOptions);\n  return date;\n}","import startOfWeek from '../startOfWeek/index.js';\nimport startOfWeekYear from '../startOfWeekYear/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Number} the week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * var result = getISOWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * var result = getISOWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nexport default function getWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfWeek(date, options).getTime() - startOfWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import getDate from '../getDate/index.js';\nimport getDay from '../getDay/index.js';\nimport startOfMonth from '../startOfMonth/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getWeekOfMonth\n * @category Week Helpers\n * @summary Get the week of the month of the given date.\n *\n * @description\n * Get the week of the month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Number} the week of month\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // Which week of the month is 9 November 2017?\n * var result = getWeekOfMonth(new Date(2017, 10, 9))\n * //=> 2\n */\n\nexport default function getWeekOfMonth(date, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var currentDayOfMonth = getDate(date);\n\n  if (isNaN(currentDayOfMonth)) {\n    return currentDayOfMonth;\n  }\n\n  var startWeekDay = getDay(startOfMonth(date));\n  var lastDayOfFirstWeek = 0;\n\n  if (startWeekDay >= weekStartsOn) {\n    lastDayOfFirstWeek = weekStartsOn + 7 - startWeekDay;\n  } else {\n    lastDayOfFirstWeek = weekStartsOn - startWeekDay;\n  }\n\n  var weekNumber = 1;\n\n  if (currentDayOfMonth > lastDayOfFirstWeek) {\n    var remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;\n    weekNumber = weekNumber + Math.ceil(remainingDaysAfterFirstWeek / 7);\n  }\n\n  return weekNumber;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name lastDayOfMonth\n * @category Month Helpers\n * @summary Return the last day of a month for the given date.\n *\n * @description\n * Return the last day of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of a month for 2 September 2014 11:55:00:\n * var result = lastDayOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 00:00:00\n */\n\nexport default function lastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import differenceInCalendarWeeks from '../differenceInCalendarWeeks/index.js';\nimport lastDayOfMonth from '../lastDayOfMonth/index.js';\nimport startOfMonth from '../startOfMonth/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getWeeksInMonth\n * @category Week Helpers\n * @summary Get the number of calendar weeks a month spans.\n *\n * @description\n * Get the number of calendar weeks the month in the given date spans.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Number} the number of calendar weeks\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // How many calendar weeks does February 2015 span?\n * var result = getWeeksInMonth(new Date(2015, 1, 8))\n * //=> 4\n *\n * @example\n * // If the week starts on Monday,\n * // how many calendar weeks does July 2017 span?\n * var result = getWeeksInMonth(new Date(2017, 6, 5), { weekStartsOn: 1 })\n * //=> 6\n */\n\nexport default function getWeeksInMonth(date, options) {\n  requiredArgs(1, arguments);\n  return differenceInCalendarWeeks(lastDayOfMonth(date), startOfMonth(date), options) + 1;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getYear\n * @category Year Helpers\n * @summary Get the year of the given date.\n *\n * @description\n * Get the year of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which year is 2 July 2014?\n * var result = getYear(new Date(2014, 6, 2))\n * //=> 2014\n */\n\nexport default function getYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  return year;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addDays from '../addDays/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * var result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\n\nexport default function subDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addDays(dirtyDate, -amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMonths from '../addMonths/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * var result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}","import subDays from '../subDays/index.js';\nimport subMonths from '../subMonths/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\n/**\n * @name sub\n * @category Common Helpers\n * @summary Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\n *\n * @description\n * Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be subtracted\n *\n * | Key     | Description                        |\n * |---------|------------------------------------|\n * | years   | Amount of years to be subtracted   |\n * | months  | Amount of months to be subtracted  |\n * | weeks   | Amount of weeks to be subtracted   |\n * | days    | Amount of days to be subtracted    |\n * | hours   | Amount of hours to be subtracted   |\n * | minutes | Amount of minutes to be subtracted |\n * | seconds | Amount of seconds to be subtracted |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract the following duration from 15 June 2017 15:29:20\n * const result = sub(new Date(2017, 5, 15, 15, 29, 20), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30\n * })\n * //=> Mon Sep 1 2014 10:19:50\n */\n\nexport default function sub(dirtyDate, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || typeof duration !== 'object') return new Date(NaN);\n  var years = 'years' in duration ? toInteger(duration.years) : 0;\n  var months = 'months' in duration ? toInteger(duration.months) : 0;\n  var weeks = 'weeks' in duration ? toInteger(duration.weeks) : 0;\n  var days = 'days' in duration ? toInteger(duration.days) : 0;\n  var hours = 'hours' in duration ? toInteger(duration.hours) : 0;\n  var minutes = 'minutes' in duration ? toInteger(duration.minutes) : 0;\n  var seconds = 'seconds' in duration ? toInteger(duration.seconds) : 0; // Subtract years and months\n\n  var dateWithoutMonths = subMonths(toDate(dirtyDate), months + years * 12); // Subtract weeks and days\n\n  var dateWithoutDays = subDays(dateWithoutMonths, days + weeks * 7); // Subtract hours, minutes and seconds\n\n  var minutestoSub = minutes + hours * 60;\n  var secondstoSub = seconds + minutestoSub * 60;\n  var mstoSub = secondstoSub * 1000;\n  var finalDate = new Date(dateWithoutDays.getTime() - mstoSub);\n  return finalDate;\n}","import compareAsc from '../compareAsc/index.js';\nimport differenceInYears from '../differenceInYears/index.js';\nimport differenceInMonths from '../differenceInMonths/index.js';\nimport differenceInDays from '../differenceInDays/index.js';\nimport differenceInHours from '../differenceInHours/index.js';\nimport differenceInMinutes from '../differenceInMinutes/index.js';\nimport differenceInSeconds from '../differenceInSeconds/index.js';\nimport isValid from '../isValid/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nimport toDate from '../toDate/index.js';\nimport sub from '../sub/index.js';\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @param {Interval} interval - the interval to convert to duration\n *\n * @returns {Duration} The duration Object\n * @throws {TypeError} Requires 2 arguments\n * @throws {RangeError} `start` must not be Invalid Date\n * @throws {RangeError} `end` must not be Invalid Date\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\n\nexport default function intervalToDuration(_ref) {\n  var start = _ref.start,\n      end = _ref.end;\n  requiredArgs(1, arguments);\n  var dateLeft = toDate(start);\n  var dateRight = toDate(end);\n\n  if (!isValid(dateLeft)) {\n    throw new RangeError('Start Date is invalid');\n  }\n\n  if (!isValid(dateRight)) {\n    throw new RangeError('End Date is invalid');\n  }\n\n  var duration = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  };\n  var sign = compareAsc(dateLeft, dateRight);\n  duration.years = Math.abs(differenceInYears(dateLeft, dateRight));\n  var remainingMonths = sub(dateLeft, {\n    years: sign * duration.years\n  });\n  duration.months = Math.abs(differenceInMonths(remainingMonths, dateRight));\n  var remainingDays = sub(remainingMonths, {\n    months: sign * duration.months\n  });\n  duration.days = Math.abs(differenceInDays(remainingDays, dateRight));\n  var remainingHours = sub(remainingDays, {\n    days: sign * duration.days\n  });\n  duration.hours = Math.abs(differenceInHours(remainingHours, dateRight));\n  var remainingMinutes = sub(remainingHours, {\n    hours: sign * duration.hours\n  });\n  duration.minutes = Math.abs(differenceInMinutes(remainingMinutes, dateRight));\n  var remainingSeconds = sub(remainingMinutes, {\n    minutes: sign * duration.minutes\n  });\n  duration.seconds = Math.abs(differenceInSeconds(remainingSeconds, dateRight));\n  return duration;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isAfter\n * @category Common Helpers\n * @summary Is the first date after the second one?\n *\n * @description\n * Is the first date after the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be after the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is after the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 after 11 February 1987?\n * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> true\n */\n\nexport default function isAfter(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() > dateToCompare.getTime();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be before the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is before the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */\n\nexport default function isBefore(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() < dateToCompare.getTime();\n}","import requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * var result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * var result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * var result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * var result = isDate({})\n * //=> false\n */\n\nexport default function isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isEqual\n * @category Common Helpers\n * @summary Are the given dates equal?\n *\n * @description\n * Are the given dates equal?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Boolean} the dates are equal\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?\n * var result = isEqual(\n *   new Date(2014, 6, 2, 6, 30, 45, 0),\n *   new Date(2014, 6, 2, 6, 30, 45, 500)\n * )\n * //=> false\n */\n\nexport default function isEqual(dirtyLeftDate, dirtyRightDate) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyLeftDate);\n  var dateRight = toDate(dirtyRightDate);\n  return dateLeft.getTime() === dateRight.getTime();\n}","/**\n * @name isExists\n * @category Common Helpers\n * @summary Is the given date exists?\n *\n * @description\n * Checks if the given arguments convert to an existing date.\n *\n * @param {Number} year of the date to check\n * @param {Number} month of the date to check\n * @param {Number} day of the date to check\n * @returns {Boolean} the date exists\n * @throws {TypeError} 3 arguments required\n *\n * @example\n * // For the valid date:\n * var result = isExists(2018, 0, 31)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isExists(2018, 1, 31)\n * //=> false\n */\nexport default function isExists(year, month, day) {\n  if (arguments.length < 3) {\n    throw new TypeError('3 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = new Date(year, month, day);\n  return date.getFullYear() === year && date.getMonth() === month && date.getDate() === day;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isFirstDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the first day of a month?\n *\n * @description\n * Is the given date the first day of a month?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the first day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 1 September 2014 the first day of a month?\n * var result = isFirstDayOfMonth(new Date(2014, 8, 1))\n * //=> true\n */\n\nexport default function isFirstDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDate() === 1;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isFriday\n * @category Weekday Helpers\n * @summary Is the given date Friday?\n *\n * @description\n * Is the given date Friday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Friday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 26 September 2014 Friday?\n * var result = isFriday(new Date(2014, 8, 26))\n * //=> true\n */\n\nexport default function isFriday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 5;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isFuture\n * @category Common Helpers\n * @summary Is the given date in the future?\n * @pure false\n *\n * @description\n * Is the given date in the future?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in the future\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 31 December 2014 in the future?\n * var result = isFuture(new Date(2014, 11, 31))\n * //=> true\n */\n\nexport default function isFuture(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getTime() > Date.now();\n}","import toDate from '../toDate/index.js';\nimport endOfDay from '../endOfDay/index.js';\nimport endOfMonth from '../endOfMonth/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * var result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\n\nexport default function isLastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return endOfDay(date).getTime() === endOfMonth(date).getTime();\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = toInteger(dirtyDay);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import getUTCWeekYear from '../../../_lib/getUTCWeekYear/index.js';\nimport setUTCDay from '../../../_lib/setUTCDay/index.js';\nimport setUTCISODay from '../../../_lib/setUTCISODay/index.js';\nimport setUTCISOWeek from '../../../_lib/setUTCISOWeek/index.js';\nimport setUTCWeek from '../../../_lib/setUTCWeek/index.js';\nimport startOfUTCISOWeek from '../../../_lib/startOfUTCISOWeek/index.js';\nimport startOfUTCWeek from '../../../_lib/startOfUTCWeek/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar MILLISECONDS_IN_SECOND = 1000;\nvar numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/,\n  // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/,\n  // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/,\n  // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/,\n  // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/,\n  // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/,\n  // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  minute: /^[0-5]?\\d/,\n  // 0 to 59\n  second: /^[0-5]?\\d/,\n  // 0 to 59\n  singleDigit: /^\\d/,\n  // 0 to 9\n  twoDigits: /^\\d{1,2}/,\n  // 0 to 99\n  threeDigits: /^\\d{1,3}/,\n  // 0 to 999\n  fourDigits: /^\\d{1,4}/,\n  // 0 to 9999\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/,\n  // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/,\n  // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/,\n  // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/ // 0 to 9999, -0 to -9999\n\n};\nvar timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/\n};\n\nfunction parseNumericPattern(pattern, string, valueCallback) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  var value = parseInt(matchResult[0], 10);\n  return {\n    value: valueCallback ? valueCallback(value) : value,\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseTimezonePattern(pattern, string) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  } // Input is 'Z'\n\n\n  if (matchResult[0] === 'Z') {\n    return {\n      value: 0,\n      rest: string.slice(1)\n    };\n  }\n\n  var sign = matchResult[1] === '+' ? 1 : -1;\n  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n  return {\n    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseAnyDigitsSigned(string, valueCallback) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);\n}\n\nfunction parseNDigits(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction parseNDigitsSigned(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^-?\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction dayPeriodEnumToHours(enumValue) {\n  switch (enumValue) {\n    case 'morning':\n      return 4;\n\n    case 'evening':\n      return 17;\n\n    case 'pm':\n    case 'noon':\n    case 'afternoon':\n      return 12;\n\n    case 'am':\n    case 'midnight':\n    case 'night':\n    default:\n      return 0;\n  }\n}\n\nfunction normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  var isCommonEra = currentYear > 0; // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n\n  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n  var result;\n\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    var rangeEnd = absCurrentYear + 50;\n    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;\n    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // User for validation\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\n\n\nvar parsers = {\n  // Era\n  G: {\n    priority: 140,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // AD, BC\n        case 'G':\n        case 'GG':\n        case 'GGG':\n          return match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n        // A, B\n\n        case 'GGGGG':\n          return match.era(string, {\n            width: 'narrow'\n          });\n        // Anno Domini, Before Christ\n\n        case 'GGGG':\n        default:\n          return match.era(string, {\n            width: 'wide'\n          }) || match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n      }\n    },\n    set: function (date, flags, value, _options) {\n      flags.era = value;\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['R', 'u', 't', 'T']\n  },\n  // Year\n  y: {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'yy'\n        };\n      };\n\n      switch (token) {\n        case 'y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, _options) {\n      var currentYear = date.getUTCFullYear();\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week-numbering year\n  Y: {\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'YY'\n        };\n      };\n\n      switch (token) {\n        case 'Y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'Yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, options) {\n      var currentYear = getUTCWeekYear(date, options);\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);\n        date.setUTCHours(0, 0, 0, 0);\n        return startOfUTCWeek(date, options);\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);\n      date.setUTCHours(0, 0, 0, 0);\n      return startOfUTCWeek(date, options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week-numbering year\n  R: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'R') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (_date, _flags, value, _options) {\n      var firstWeekOfYear = new Date(0);\n      firstWeekOfYear.setUTCFullYear(value, 0, 4);\n      firstWeekOfYear.setUTCHours(0, 0, 0, 0);\n      return startOfUTCISOWeek(firstWeekOfYear);\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Extended year\n  u: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'u') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Quarter\n  Q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'Q':\n        case 'QQ':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'Qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'QQQ':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'QQQQQ':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'QQQQ':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone quarter\n  q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'q':\n        case 'qq':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'qqq':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'qqqqq':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'qqqq':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Month\n  M: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'M':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'MM':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Mo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'MMM':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // J, F, ..., D\n\n        case 'MMMMM':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // January, February, ..., December\n\n        case 'MMMM':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone month\n  L: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'L':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'LL':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Lo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'LLL':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // J, F, ..., D\n\n        case 'LLLLL':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // January, February, ..., December\n\n        case 'LLLL':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week of year\n  w: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'w':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'wo':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCWeek(setUTCWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week of year\n  I: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'I':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'Io':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Day of the month\n  d: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'd':\n          return parseNumericPattern(numericPatterns.date, string);\n\n        case 'do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n      var month = date.getUTCMonth();\n\n      if (isLeapYear) {\n        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n      } else {\n        return value >= 1 && value <= DAYS_IN_MONTH[month];\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCDate(value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of year\n  D: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'D':\n        case 'DD':\n          return parseNumericPattern(numericPatterns.dayOfYear, string);\n\n        case 'Do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n\n      if (isLeapYear) {\n        return value >= 1 && value <= 366;\n      } else {\n        return value >= 1 && value <= 365;\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(0, value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of week\n  E: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // Tue\n        case 'E':\n        case 'EE':\n        case 'EEE':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'EEEEE':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'EEEEEE':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'EEEE':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local day of week\n  e: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'e':\n        case 'ee':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'eo':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'eee':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'eeeee':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'eeeeee':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'eeee':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']\n  },\n  // Stand-alone local day of week\n  c: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'c':\n        case 'cc':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'co':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'ccc':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // T\n\n        case 'ccccc':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tu\n\n        case 'cccccc':\n          return match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tuesday\n\n        case 'cccc':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']\n  },\n  // ISO day of week\n  i: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        if (value === 0) {\n          return 7;\n        }\n\n        return value;\n      };\n\n      switch (token) {\n        // 2\n        case 'i':\n        case 'ii':\n          // 02\n          return parseNDigits(token.length, string);\n        // 2nd\n\n        case 'io':\n          return match.ordinalNumber(string, {\n            unit: 'day'\n          });\n        // Tue\n\n        case 'iii':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // T\n\n        case 'iiiii':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tu\n\n        case 'iiiiii':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tuesday\n\n        case 'iiii':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 7;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCISODay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']\n  },\n  // AM or PM\n  a: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'a':\n        case 'aa':\n        case 'aaa':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaaa':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaa':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['b', 'B', 'H', 'K', 'k', 't', 'T']\n  },\n  // AM, PM, midnight\n  b: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'b':\n        case 'bb':\n        case 'bbb':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbbb':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbb':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'B', 'H', 'K', 'k', 't', 'T']\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'B':\n        case 'BB':\n        case 'BBB':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBBB':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBB':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 't', 'T']\n  },\n  // Hour [1-12]\n  h: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'h':\n          return parseNumericPattern(numericPatterns.hour12h, string);\n\n        case 'ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 12;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else if (!isPM && value === 12) {\n        date.setUTCHours(0, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['H', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-23]\n  H: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'H':\n          return parseNumericPattern(numericPatterns.hour23h, string);\n\n        case 'Ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 23;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(value, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-11]\n  K: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'K':\n          return parseNumericPattern(numericPatterns.hour11h, string);\n\n        case 'Ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'H', 'k', 't', 'T']\n  },\n  // Hour [1-24]\n  k: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'k':\n          return parseNumericPattern(numericPatterns.hour24h, string);\n\n        case 'ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 24;\n    },\n    set: function (date, _flags, value, _options) {\n      var hours = value <= 24 ? value % 24 : value;\n      date.setUTCHours(hours, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T']\n  },\n  // Minute\n  m: {\n    priority: 60,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'm':\n          return parseNumericPattern(numericPatterns.minute, string);\n\n        case 'mo':\n          return match.ordinalNumber(string, {\n            unit: 'minute'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMinutes(value, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Second\n  s: {\n    priority: 50,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 's':\n          return parseNumericPattern(numericPatterns.second, string);\n\n        case 'so':\n          return match.ordinalNumber(string, {\n            unit: 'second'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCSeconds(value, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Fraction of second\n  S: {\n    priority: 30,\n    parse: function (string, token, _match, _options) {\n      var valueCallback = function (value) {\n        return Math.floor(value * Math.pow(10, -token.length + 3));\n      };\n\n      return parseNDigits(token.length, string, valueCallback);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMilliseconds(value);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Timezone (ISO-8601. +00:00 is `'Z'`)\n  X: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'X':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'XX':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'XXXX':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'XXXXX':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'XXX':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'x']\n  },\n  // Timezone (ISO-8601)\n  x: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'x':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'xx':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'xxxx':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'xxxxx':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'xxx':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'X']\n  },\n  // Seconds timestamp\n  t: {\n    priority: 40,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value * 1000), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  },\n  // Milliseconds timestamp\n  T: {\n    priority: 20,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  }\n};\nexport default parsers;","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport getUTCWeek from '../getUTCWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCWeek(dirtyDate, dirtyWeek, options) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var week = toInteger(dirtyWeek);\n  var diff = getUTCWeek(date, options) - week;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport getUTCISOWeek from '../getUTCISOWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISOWeek(dirtyDate, dirtyISOWeek) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var isoWeek = toInteger(dirtyISOWeek);\n  var diff = getUTCISOWeek(date) - isoWeek;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISODay(dirtyDate, dirtyDay) {\n  requiredArgs(2, arguments);\n  var day = toInteger(dirtyDay);\n\n  if (day % 7 === 0) {\n    day = day - 7;\n  }\n\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import defaultLocale from '../locale/en-US/index.js';\nimport subMilliseconds from '../subMilliseconds/index.js';\nimport toDate from '../toDate/index.js';\nimport assign from '../_lib/assign/index.js';\nimport longFormatters from '../_lib/format/longFormatters/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from '../_lib/protectedTokens/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport parsers from './_lib/parsers/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar notWhitespaceRegExp = /\\S/;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 0001, ..., 999               |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Old `parse` was renamed to `toDate`.\n *   Now `parse` is a new function which parses a string using a provided format.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   toDate('2016-01-01')\n *   parse('2016-01-01', 'yyyy-MM-dd', new Date())\n *   ```\n *\n * @param {String} dateString - the string to parse\n * @param {String} formatString - the string of tokens\n * @param {Date|Number} referenceDate - defines values missing from the parsed dateString\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {Date} the parsed date\n * @throws {TypeError} 3 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\n\nexport default function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {\n  requiredArgs(3, arguments);\n  var dateString = String(dirtyDateString);\n  var formatString = String(dirtyFormatString);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.match) {\n    throw new RangeError('locale must contain match property');\n  }\n\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (formatString === '') {\n    if (dateString === '') {\n      return toDate(dirtyReferenceDate);\n    } else {\n      return new Date(NaN);\n    }\n  }\n\n  var subFnOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale // If timezone isn't specified, it will be set to the system timezone\n\n  };\n  var setters = [{\n    priority: TIMEZONE_UNIT_PRIORITY,\n    subPriority: -1,\n    set: dateToSystemTimezone,\n    index: 0\n  }];\n  var i;\n  var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, subFnOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp);\n  var usedTokens = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    var firstCharacter = token[0];\n    var parser = parsers[firstCharacter];\n\n    if (parser) {\n      var incompatibleTokens = parser.incompatibleTokens;\n\n      if (Array.isArray(incompatibleTokens)) {\n        var incompatibleToken = void 0;\n\n        for (var _i = 0; _i < usedTokens.length; _i++) {\n          var usedToken = usedTokens[_i].token;\n\n          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {\n            incompatibleToken = usedTokens[_i];\n            break;\n          }\n        }\n\n        if (incompatibleToken) {\n          throw new RangeError(\"The format string mustn't contain `\".concat(incompatibleToken.fullToken, \"` and `\").concat(token, \"` at the same time\"));\n        }\n      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {\n        throw new RangeError(\"The format string mustn't contain `\".concat(token, \"` and any other token at the same time\"));\n      }\n\n      usedTokens.push({\n        token: firstCharacter,\n        fullToken: token\n      });\n      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);\n\n      if (!parseResult) {\n        return new Date(NaN);\n      }\n\n      setters.push({\n        priority: parser.priority,\n        subPriority: parser.subPriority || 0,\n        set: parser.set,\n        validate: parser.validate,\n        value: parseResult.value,\n        index: setters.length\n      });\n      dateString = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n      } // Replace two single quote characters with one single quote character\n\n\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      } // Cut token from string, or, if string doesn't match the token, return Invalid Date\n\n\n      if (dateString.indexOf(token) === 0) {\n        dateString = dateString.slice(token.length);\n      } else {\n        return new Date(NaN);\n      }\n    }\n  } // Check if the remaining input contains something other than whitespace\n\n\n  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {\n    return new Date(NaN);\n  }\n\n  var uniquePrioritySetters = setters.map(function (setter) {\n    return setter.priority;\n  }).sort(function (a, b) {\n    return b - a;\n  }).filter(function (priority, index, array) {\n    return array.indexOf(priority) === index;\n  }).map(function (priority) {\n    return setters.filter(function (setter) {\n      return setter.priority === priority;\n    }).sort(function (a, b) {\n      return b.subPriority - a.subPriority;\n    });\n  }).map(function (setterArray) {\n    return setterArray[0];\n  });\n  var date = toDate(dirtyReferenceDate);\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37\n\n\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));\n  var flags = {};\n\n  for (i = 0; i < uniquePrioritySetters.length; i++) {\n    var setter = uniquePrioritySetters[i];\n\n    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {\n      return new Date(NaN);\n    }\n\n    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)\n\n    if (result[0]) {\n      utcDate = result[0];\n      assign(flags, result[1]); // Result is date\n    } else {\n      utcDate = result;\n    }\n  }\n\n  return utcDate;\n}\n\nfunction dateToSystemTimezone(date, flags) {\n  if (flags.timestampIsSet) {\n    return date;\n  }\n\n  var convertedDate = new Date(0);\n  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n  return convertedDate;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import parse from '../parse/index.js';\nimport isValid from '../isValid/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isMatch\n * @category Common Helpers\n * @summary validates the date string against given formats\n *\n * @description\n * Return the true if given date is string correct against the given format else\n * will return false.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * isMatch('23 AM', 'HH a')\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Su            | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 0001, ..., 999               |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `isMatch` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `isMatch` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `isMatch` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `isMatch('50', 'yy') //=> true`\n *\n *    `isMatch('75', 'yy') //=> true`\n *\n *    while `uu` will use the year as is:\n *\n *    `isMatch('50', 'uu') //=> true`\n *\n *    `isMatch('75', 'uu') //=> true`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be checked in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are matched (e.g. when matching string 'January 1st' without a year),\n * the values will be taken from today's using `new Date()` date which works as a context of parsing.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n *\n *\n * @param {String} dateString - the date string to verify\n * @param {String} formatString - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {Boolean}\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Match 11 February 2014 from middle-endian format:\n * var result = isMatch('02/11/2014', 'MM/dd/yyyy')\n * //=> true\n *\n * @example\n * // Match 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = isMatch('28-a de februaro', \"do 'de' MMMM\", {\n *   locale: eo\n * })\n * //=> true\n */\n\nexport default function isMatch(dateString, formatString, dirtyOptions) {\n  requiredArgs(2, arguments);\n  return isValid(parse(dateString, formatString, new Date(), dirtyOptions));\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isMonday\n * @category Weekday Helpers\n * @summary Is the given date Monday?\n *\n * @description\n * Is the given date Monday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Monday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 22 September 2014 Monday?\n * var result = isMonday(new Date(2014, 8, 22))\n * //=> true\n */\n\nexport default function isMonday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 1;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isPast\n * @category Common Helpers\n * @summary Is the given date in the past?\n * @pure false\n *\n * @description\n * Is the given date in the past?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in the past\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 2 July 2014 in the past?\n * var result = isPast(new Date(2014, 6, 2))\n * //=> true\n */\n\nexport default function isPast(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getTime() < Date.now();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfHour\n * @category Hour Helpers\n * @summary Return the start of an hour for the given date.\n *\n * @description\n * Return the start of an hour for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an hour for 2 September 2014 11:55:00:\n * var result = startOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:00:00\n */\n\nexport default function startOfHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMinutes(0, 0, 0);\n  return date;\n}","import startOfHour from '../startOfHour/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameHour\n * @category Hour Helpers\n * @summary Are the given dates in the same hour?\n *\n * @description\n * Are the given dates in the same hour?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same hour\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 2014 06:00:00 and 4 September 06:30:00 in the same hour?\n * var result = isSameHour(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 6, 30))\n * //=> true\n */\n\nexport default function isSameHour(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfHour = startOfHour(dirtyDateLeft);\n  var dateRightStartOfHour = startOfHour(dirtyDateRight);\n  return dateLeftStartOfHour.getTime() === dateRightStartOfHour.getTime();\n}","import startOfWeek from '../startOfWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameWeek\n * @category Week Helpers\n * @summary Are the given dates in the same week?\n *\n * @description\n * Are the given dates in the same week?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Boolean} the dates are in the same week\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // Are 31 August 2014 and 4 September 2014 in the same week?\n * var result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4))\n * //=> true\n *\n * @example\n * // If week starts with Monday,\n * // are 31 August 2014 and 4 September 2014 in the same week?\n * var result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4), {\n *   weekStartsOn: 1\n * })\n * //=> false\n */\n\nexport default function isSameWeek(dirtyDateLeft, dirtyDateRight, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfWeek = startOfWeek(dirtyDateLeft, dirtyOptions);\n  var dateRightStartOfWeek = startOfWeek(dirtyDateRight, dirtyOptions);\n  return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime();\n}","import isSameWeek from '../isSameWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameISOWeek\n * @category ISO Week Helpers\n * @summary Are the given dates in the same ISO week?\n *\n * @description\n * Are the given dates in the same ISO week?\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same ISO week\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 1 September 2014 and 7 September 2014 in the same ISO week?\n * var result = isSameISOWeek(new Date(2014, 8, 1), new Date(2014, 8, 7))\n * //=> true\n */\n\nexport default function isSameISOWeek(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  return isSameWeek(dirtyDateLeft, dirtyDateRight, {\n    weekStartsOn: 1\n  });\n}","import startOfISOWeekYear from '../startOfISOWeekYear/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Are the given dates in the same ISO week-numbering year?\n *\n * @description\n * Are the given dates in the same ISO week-numbering year?\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `isSameISOYear` to `isSameISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `getWeekYear`.\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same ISO week-numbering year\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 29 December 2003 and 2 January 2005 in the same ISO week-numbering year?\n * var result = isSameISOWeekYear(new Date(2003, 11, 29), new Date(2005, 0, 2))\n * //=> true\n */\n\nexport default function isSameISOWeekYear(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfYear = startOfISOWeekYear(dirtyDateLeft);\n  var dateRightStartOfYear = startOfISOWeekYear(dirtyDateRight);\n  return dateLeftStartOfYear.getTime() === dateRightStartOfYear.getTime();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfMinute\n * @category Minute Helpers\n * @summary Return the start of a minute for the given date.\n *\n * @description\n * Return the start of a minute for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a minute\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a minute for 1 December 2014 22:15:45.400:\n * var result = startOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:00\n */\n\nexport default function startOfMinute(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setSeconds(0, 0);\n  return date;\n}","import startOfMinute from '../startOfMinute/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameMinute\n * @category Minute Helpers\n * @summary Are the given dates in the same minute?\n *\n * @description\n * Are the given dates in the same minute?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same minute\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 2014 06:30:00 and 4 September 2014 06:30:15\n * // in the same minute?\n * var result = isSameMinute(\n *   new Date(2014, 8, 4, 6, 30),\n *   new Date(2014, 8, 4, 6, 30, 15)\n * )\n * //=> true\n */\n\nexport default function isSameMinute(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfMinute = startOfMinute(dirtyDateLeft);\n  var dateRightStartOfMinute = startOfMinute(dirtyDateRight);\n  return dateLeftStartOfMinute.getTime() === dateRightStartOfMinute.getTime();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameMonth\n * @category Month Helpers\n * @summary Are the given dates in the same month?\n *\n * @description\n * Are the given dates in the same month?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same month\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same month?\n * var result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n */\n\nexport default function isSameMonth(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();\n}","import startOfQuarter from '../startOfQuarter/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameQuarter\n * @category Quarter Helpers\n * @summary Are the given dates in the same year quarter?\n *\n * @description\n * Are the given dates in the same year quarter?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same quarter\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 1 January 2014 and 8 March 2014 in the same quarter?\n * var result = isSameQuarter(new Date(2014, 0, 1), new Date(2014, 2, 8))\n * //=> true\n */\n\nexport default function isSameQuarter(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfQuarter = startOfQuarter(dirtyDateLeft);\n  var dateRightStartOfQuarter = startOfQuarter(dirtyDateRight);\n  return dateLeftStartOfQuarter.getTime() === dateRightStartOfQuarter.getTime();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfSecond\n * @category Second Helpers\n * @summary Return the start of a second for the given date.\n *\n * @description\n * Return the start of a second for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a second\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a second for 1 December 2014 22:15:45.400:\n * var result = startOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:45.000\n */\n\nexport default function startOfSecond(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMilliseconds(0);\n  return date;\n}","import startOfSecond from '../startOfSecond/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameSecond\n * @category Second Helpers\n * @summary Are the given dates in the same second?\n *\n * @description\n * Are the given dates in the same second?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same second\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 2014 06:30:15.000 and 4 September 2014 06:30.15.500\n * // in the same second?\n * var result = isSameSecond(\n *   new Date(2014, 8, 4, 6, 30, 15),\n *   new Date(2014, 8, 4, 6, 30, 15, 500)\n * )\n * //=> true\n */\n\nexport default function isSameSecond(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfSecond = startOfSecond(dirtyDateLeft);\n  var dateRightStartOfSecond = startOfSecond(dirtyDateRight);\n  return dateLeftStartOfSecond.getTime() === dateRightStartOfSecond.getTime();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameYear\n * @category Year Helpers\n * @summary Are the given dates in the same year?\n *\n * @description\n * Are the given dates in the same year?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same year\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same year?\n * var result = isSameYear(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n */\n\nexport default function isSameYear(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() === dateRight.getFullYear();\n}","import isSameHour from '../isSameHour/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isThisHour\n * @category Hour Helpers\n * @summary Is the given date in the same hour as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same hour as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If now is 25 September 2014 18:30:15.500,\n * // is 25 September 2014 18:00:00 in this hour?\n * var result = isThisHour(new Date(2014, 8, 25, 18))\n * //=> true\n */\n\nexport default function isThisHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameHour(Date.now(), dirtyDate);\n}","import isSameISOWeek from '../isSameISOWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isThisISOWeek\n * @category ISO Week Helpers\n * @summary Is the given date in the same ISO week as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same ISO week as the current date?\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 25 September 2014, is 22 September 2014 in this ISO week?\n * var result = isThisISOWeek(new Date(2014, 8, 22))\n * //=> true\n */\n\nexport default function isThisISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameISOWeek(dirtyDate, Date.now());\n}","import isSameMinute from '../isSameMinute/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isThisMinute\n * @category Minute Helpers\n * @summary Is the given date in the same minute as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same minute as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this minute\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If now is 25 September 2014 18:30:15.500,\n * // is 25 September 2014 18:30:00 in this minute?\n * var result = isThisMinute(new Date(2014, 8, 25, 18, 30))\n * //=> true\n */\n\nexport default function isThisMinute(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameMinute(Date.now(), dirtyDate);\n}","import isSameMonth from '../isSameMonth/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isThisMonth\n * @category Month Helpers\n * @summary Is the given date in the same month as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same month as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 25 September 2014, is 15 September 2014 in this month?\n * var result = isThisMonth(new Date(2014, 8, 15))\n * //=> true\n */\n\nexport default function isThisMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameMonth(Date.now(), dirtyDate);\n}","import isSameQuarter from '../isSameQuarter/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isThisQuarter\n * @category Quarter Helpers\n * @summary Is the given date in the same quarter as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same quarter as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 25 September 2014, is 2 July 2014 in this quarter?\n * var result = isThisQuarter(new Date(2014, 6, 2))\n * //=> true\n */\n\nexport default function isThisQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameQuarter(Date.now(), dirtyDate);\n}","import isSameSecond from '../isSameSecond/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isThisSecond\n * @category Second Helpers\n * @summary Is the given date in the same second as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same second as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this second\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If now is 25 September 2014 18:30:15.500,\n * // is 25 September 2014 18:30:15.000 in this second?\n * var result = isThisSecond(new Date(2014, 8, 25, 18, 30, 15))\n * //=> true\n */\n\nexport default function isThisSecond(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameSecond(Date.now(), dirtyDate);\n}","import isSameWeek from '../isSameWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isThisWeek\n * @category Week Helpers\n * @summary Is the given date in the same week as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same week as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @param {Object} [options] - the object with options\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Boolean} the date is in this week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // If today is 25 September 2014, is 21 September 2014 in this week?\n * var result = isThisWeek(new Date(2014, 8, 21))\n * //=> true\n *\n * @example\n * // If today is 25 September 2014 and week starts with Monday\n * // is 21 September 2014 in this week?\n * var result = isThisWeek(new Date(2014, 8, 21), { weekStartsOn: 1 })\n * //=> false\n */\n\nexport default function isThisWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  return isSameWeek(dirtyDate, Date.now(), options);\n}","import isSameYear from '../isSameYear/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isThisYear\n * @category Year Helpers\n * @summary Is the given date in the same year as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same year as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 25 September 2014, is 2 July 2014 in this year?\n * var result = isThisYear(new Date(2014, 6, 2))\n * //=> true\n */\n\nexport default function isThisYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameYear(dirtyDate, Date.now());\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isThursday\n * @category Weekday Helpers\n * @summary Is the given date Thursday?\n *\n * @description\n * Is the given date Thursday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Thursday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 25 September 2014 Thursday?\n * var result = isThursday(new Date(2014, 8, 25))\n * //=> true\n */\n\nexport default function isThursday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 4;\n}","import isSameDay from '../isSameDay/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isToday\n * @category Day Helpers\n * @summary Is the given date today?\n * @pure false\n *\n * @description\n * Is the given date today?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is today\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * var result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\n\nexport default function isToday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameDay(dirtyDate, Date.now());\n}","import addDays from '../addDays/index.js';\nimport isSameDay from '../isSameDay/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isTomorrow\n * @category Day Helpers\n * @summary Is the given date tomorrow?\n * @pure false\n *\n * @description\n * Is the given date tomorrow?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is tomorrow\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 7 October 14:00:00 tomorrow?\n * var result = isTomorrow(new Date(2014, 9, 7, 14, 0))\n * //=> true\n */\n\nexport default function isTomorrow(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameDay(dirtyDate, addDays(Date.now(), 1));\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isTuesday\n * @category Weekday Helpers\n * @summary Is the given date Tuesday?\n *\n * @description\n * Is the given date Tuesday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Tuesday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 23 September 2014 Tuesday?\n * var result = isTuesday(new Date(2014, 8, 23))\n * //=> true\n */\n\nexport default function isTuesday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 2;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isWednesday\n * @category Weekday Helpers\n * @summary Is the given date Wednesday?\n *\n * @description\n * Is the given date Wednesday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Wednesday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 24 September 2014 Wednesday?\n * var result = isWednesday(new Date(2014, 8, 24))\n * //=> true\n */\n\nexport default function isWednesday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 3;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `isWithinRange` to `isWithinInterval`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   isWithinRange(\n *     new Date(2014, 0, 3),\n *     new Date(2014, 0, 1), new Date(2014, 0, 7)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   isWithinInterval(\n *     new Date(2014, 0, 3),\n *     { start: new Date(2014, 0, 1), end: new Date(2014, 0, 7) }\n *   )\n *   ```\n *\n * @param {Date|Number} date - the date to check\n * @param {Interval} interval - the interval to check\n * @returns {Boolean} the date is within the interval\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date }) // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end }) // => true\n */\n\nexport default function isWithinInterval(dirtyDate, dirtyInterval) {\n  requiredArgs(2, arguments);\n  var interval = dirtyInterval || {};\n  var time = toDate(dirtyDate).getTime();\n  var startTime = toDate(interval.start).getTime();\n  var endTime = toDate(interval.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  return time >= startTime && time <= endTime;\n}","import isSameDay from '../isSameDay/index.js';\nimport subDays from '../subDays/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isYesterday\n * @category Day Helpers\n * @summary Is the given date yesterday?\n * @pure false\n *\n * @description\n * Is the given date yesterday?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is yesterday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 5 October 14:00:00 yesterday?\n * var result = isYesterday(new Date(2014, 9, 5, 14, 0))\n * //=> true\n */\n\nexport default function isYesterday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameDay(dirtyDate, subDays(Date.now(), 1));\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name lastDayOfDecade\n * @category Decade Helpers\n * @summary Return the last day of a decade for the given date.\n *\n * @description\n * Return the last day of a decade for the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the last day of a decade\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of a decade for 21 December 2012 21:12:00:\n * var result = lastDayOfDecade(new Date(2012, 11, 21, 21, 12, 00))\n * //=> Wed Dec 31 2019 00:00:00\n */\n\nexport default function lastDayOfDecade(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var decade = 9 + Math.floor(year / 10) * 10;\n  date.setFullYear(decade + 1, 0, 0);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name lastDayOfWeek\n * @category Week Helpers\n * @summary Return the last day of a week for the given date.\n *\n * @description\n * Return the last day of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the last day of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The last day of a week for 2 September 2014 11:55:00:\n * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the last day of the week for 2 September 2014 11:55:00:\n * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\n\nexport default function lastDayOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setHours(0, 0, 0, 0);\n  date.setDate(date.getDate() + diff);\n  return date;\n}","import lastDayOfWeek from '../lastDayOfWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name lastDayOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the last day of an ISO week for the given date.\n *\n * @description\n * Return the last day of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the last day of an ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of an ISO week for 2 September 2014 11:55:00:\n * var result = lastDayOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Sep 07 2014 00:00:00\n */\n\nexport default function lastDayOfISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  return lastDayOfWeek(dirtyDate, {\n    weekStartsOn: 1\n  });\n}","import getISOWeekYear from '../getISOWeekYear/index.js';\nimport startOfISOWeek from '../startOfISOWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name lastDayOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the last day of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the last day of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `lastDayOfISOYear` to `lastDayOfISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `getWeekYear`.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of an ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of an ISO week-numbering year for 2 July 2005:\n * var result = lastDayOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Sun Jan 01 2006 00:00:00\n */\n\nexport default function lastDayOfISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setFullYear(year + 1, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  var date = startOfISOWeek(fourthOfJanuary);\n  date.setDate(date.getDate() - 1);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name lastDayOfQuarter\n * @category Quarter Helpers\n * @summary Return the last day of a year quarter for the given date.\n *\n * @description\n * Return the last day of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the last day of a quarter\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // The last day of a quarter for 2 September 2014 11:55:00:\n * var result = lastDayOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 00:00:00\n */\n\nexport default function lastDayOfQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var currentMonth = date.getMonth();\n  var month = currentMonth - currentMonth % 3 + 3;\n  date.setMonth(month, 0);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name lastDayOfYear\n * @category Year Helpers\n * @summary Return the last day of a year for the given date.\n *\n * @description\n * Return the last day of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the last day of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of a year for 2 September 2014 11:55:00:\n * var result = lastDayOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Dec 31 2014 00:00:00\n */\n\nexport default function lastDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  date.setFullYear(year + 1, 0, 0);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport formatters from '../_lib/format/lightFormatters/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport isValid from '../isValid/index.js';\nimport subMilliseconds from '../subMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js'; // This RegExp consists of three parts separated by `|`:\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name lightFormat\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. Unlike `format`,\n * `lightFormat` doesn't use locales and outputs date using the most popular tokens.\n *\n * > ⚠️ Please note that the `lightFormat` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   |\n * |---------------------------------|---------|-----------------------------------|\n * | AM, PM                          | a..aaa  | AM, PM                            |\n * |                                 | aaaa    | a.m., p.m.                        |\n * |                                 | aaaaa   | a, p                              |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 |\n * |                                 | yy      | 44, 01, 00, 17                    |\n * |                                 | yyy     | 044, 001, 000, 017                |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |\n * |                                 | MM      | 01, 02, ..., 12                   |\n * | Day of month                    | d       | 1, 2, ..., 31                     |\n * |                                 | dd      | 01, 02, ..., 31                   |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |\n * |                                 | hh      | 01, 02, ..., 11, 12               |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |\n * |                                 | HH      | 00, 01, 02, ..., 23               |\n * | Minute                          | m       | 0, 1, ..., 59                     |\n * |                                 | mm      | 00, 01, ..., 59                   |\n * | Second                          | s       | 0, 1, ..., 59                     |\n * |                                 | ss      | 00, 01, ..., 59                   |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |\n * |                                 | SS      | 00, 01, ..., 99                   |\n * |                                 | SSS     | 000, 0001, ..., 999               |\n * |                                 | SSSS    | ...                               |\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * var result = lightFormat(new Date(2014, 1, 11), 'yyyy-MM-dd')\n * //=> '2014-02-11'\n */\n\nexport default function lightFormat(dirtyDate, dirtyFormatStr) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var result = formatStr.match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      return formatter(utcDate, substring, null, {});\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name max\n * @category Common Helpers\n * @summary Return the latest of the given dates.\n *\n * @description\n * Return the latest of the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - `max` function now accepts an array of dates rather than spread arguments.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   var date1 = new Date(1989, 6, 10)\n *   var date2 = new Date(1987, 1, 11)\n *   var maxDate = max(date1, date2)\n *\n *   // v2.0.0 onward:\n *   var dates = [new Date(1989, 6, 10), new Date(1987, 1, 11)]\n *   var maxDate = max(dates)\n *   ```\n *\n * @param {Date[]|Number[]} datesArray - the dates to compare\n * @returns {Date} the latest of the dates\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which of these dates is the latest?\n * var result = max([\n *   new Date(1989, 6, 10),\n *   new Date(1987, 1, 11),\n *   new Date(1995, 6, 2),\n *   new Date(1990, 0, 1)\n * ])\n * //=> Sun Jul 02 1995 00:00:00\n */\n\nexport default function max(dirtyDatesArray) {\n  requiredArgs(1, arguments);\n  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n\n  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.\n  } else if (typeof dirtyDatesArray === 'object' && dirtyDatesArray !== null) {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  } else {\n    // `dirtyDatesArray` is non-iterable, return Invalid Date\n    return new Date(NaN);\n  }\n\n  var result;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate);\n\n    if (result === undefined || result < currentDate || isNaN(currentDate)) {\n      result = currentDate;\n    }\n  });\n  return result || new Date(NaN);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name min\n * @category Common Helpers\n * @summary Return the earliest of the given dates.\n *\n * @description\n * Return the earliest of the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - `min` function now accepts an array of dates rather than spread arguments.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   var date1 = new Date(1989, 6, 10)\n *   var date2 = new Date(1987, 1, 11)\n *   var minDate = min(date1, date2)\n *\n *   // v2.0.0 onward:\n *   var dates = [new Date(1989, 6, 10), new Date(1987, 1, 11)]\n *   var minDate = min(dates)\n *   ```\n *\n * @param {Date[]|Number[]} datesArray - the dates to compare\n * @returns {Date} the earliest of the dates\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which of these dates is the earliest?\n * var result = min([\n *   new Date(1989, 6, 10),\n *   new Date(1987, 1, 11),\n *   new Date(1995, 6, 2),\n *   new Date(1990, 0, 1)\n * ])\n * //=> Wed Feb 11 1987 00:00:00\n */\n\nexport default function min(dirtyDatesArray) {\n  requiredArgs(1, arguments);\n  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n\n  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.\n  } else if (typeof dirtyDatesArray === 'object' && dirtyDatesArray !== null) {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  } else {\n    // `dirtyDatesArray` is non-iterable, return Invalid Date\n    return new Date(NaN);\n  }\n\n  var result;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate);\n\n    if (result === undefined || result > currentDate || isNaN(currentDate)) {\n      result = currentDate;\n    }\n  });\n  return result || new Date(NaN);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (isNaN(date) || !date) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time) || time === null) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate(), dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    result.setFullYear(dirtyDate.getUTCFullYear());\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString; // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: null\n  };\n  var year = captures[1] && parseInt(captures[1]);\n  var century = captures[2] && parseInt(captures[2]);\n  return {\n    year: century == null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return null;\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return null;\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return null; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name parseJSON\n * @category Common Helpers\n * @summary Parse a JSON date string\n *\n * @description\n * Converts a complete ISO date string in UTC time, the typical format for transmitting\n * a date in JSON, to a JavaScript `Date` instance.\n *\n * This is a minimal implementation for converting dates retrieved from a JSON API to\n * a `Date` instance which can be used with other functions in the `date-fns` library.\n * The following formats are supported:\n *\n * - `2000-03-15T05:20:10.123Z`: The output of `.toISOString()` and `JSON.stringify(new Date())`\n * - `2000-03-15T05:20:10Z`: Without milliseconds\n * - `2000-03-15T05:20:10+00:00`: With a zero offset, the default JSON encoded format in some other languages\n * - `2000-03-15T05:20:10+0000`: With a zero offset without a colon\n * - `2000-03-15T05:20:10`: Without a trailing 'Z' symbol\n * - `2000-03-15T05:20:10.1234567`: Up to 7 digits in milliseconds field. Only first 3 are taken into account since JS does not allow fractional milliseconds\n * - `2000-03-15 05:20:10`: With a space instead of a 'T' separator for APIs returning a SQL date without reformatting\n *\n * For convenience and ease of use these other input types are also supported\n * via [toDate]{@link https://date-fns.org/docs/toDate}:\n *\n * - A `Date` instance will be cloned\n * - A `number` will be treated as a timestamp\n *\n * Any other input type or invalid date strings will return an `Invalid Date`.\n *\n * @param {String|Number|Date} argument A fully formed ISO8601 date string to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n */\n\nexport default function parseJSON(argument) {\n  requiredArgs(1, arguments);\n\n  if (typeof argument === 'string') {\n    var parts = argument.match(/(\\d{4})-(\\d{2})-(\\d{2})[T ](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d{0,7}))?(?:Z|\\+00:?00)?/);\n\n    if (parts) {\n      return new Date(Date.UTC(+parts[1], parts[2] - 1, +parts[3], +parts[4], +parts[5], +parts[6], +((parts[7] || '0') + '00').substring(0, 3)));\n    }\n\n    return new Date(NaN);\n  }\n\n  return toDate(argument);\n}","import toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\n/**\n * @name roundToNearestMinutes\n * @category Minute Helpers\n * @summary Rounds the given date to the nearest minute\n *\n * @description\n * Rounds the given date to the nearest minute (or number of minutes).\n * Rounds up when the given date is exactly between the nearest round minutes.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to round\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.nearestTo=1] - nearest number of minutes to round to. E.g. `15` to round to quarter hours.\n * @returns {Date} the new date rounded to the closest minute\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.nearestTo` must be between 1 and 30\n *\n * @example\n * // Round 10 July 2014 12:12:34 to nearest minute:\n * var result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34))\n * //=> Thu Jul 10 2014 12:13:00\n *\n * @example\n * // Round 10 July 2014 12:07:30 to nearest quarter hour:\n * var result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { nearestTo: 15 })\n * // rounds up because given date is exactly between 12:00:00 and 12:15:00\n * //=> Thu Jul 10 2014 12:15:00\n */\n\nexport default function roundToNearestMinutes(dirtyDate, options) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only none provided present');\n  }\n\n  var nearestTo = options && 'nearestTo' in options ? toInteger(options.nearestTo) : 1;\n\n  if (nearestTo < 1 || nearestTo > 30) {\n    throw new RangeError('`options.nearestTo` must be between 1 and 30');\n  }\n\n  var date = toDate(dirtyDate);\n  var seconds = date.getSeconds(); // relevant if nearestTo is 1, which is the default case\n\n  var minutes = date.getMinutes() + seconds / 60;\n  var roundedMinutes = Math.floor(minutes / nearestTo) * nearestTo;\n  var remainderMinutes = minutes % nearestTo;\n  var addedMinutes = Math.round(remainderMinutes / nearestTo) * nearestTo;\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), roundedMinutes + addedMinutes);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport getDaysInMonth from '../getDaysInMonth/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setMonth\n * @category Month Helpers\n * @summary Set the month to the given date.\n *\n * @description\n * Set the month to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} month - the month of the new date\n * @returns {Date} the new date with the month set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set February to 1 September 2014:\n * var result = setMonth(new Date(2014, 8, 1), 1)\n * //=> Sat Feb 01 2014 00:00:00\n */\n\nexport default function setMonth(dirtyDate, dirtyMonth) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var month = toInteger(dirtyMonth);\n  var year = date.getFullYear();\n  var day = date.getDate();\n  var dateWithDesiredMonth = new Date(0);\n  dateWithDesiredMonth.setFullYear(year, month, 15);\n  dateWithDesiredMonth.setHours(0, 0, 0, 0);\n  var daysInMonth = getDaysInMonth(dateWithDesiredMonth); // Set the last day of the new month\n  // if the original date was the last day of the longer month\n\n  date.setMonth(month, Math.min(day, daysInMonth));\n  return date;\n}","import toDate from '../toDate/index.js';\nimport setMonth from '../setMonth/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Object} values - an object with options\n * @param {Number} [values.year] - the number of years to be set\n * @param {Number} [values.month] - the number of months to be set\n * @param {Number} [values.date] - the number of days to be set\n * @param {Number} [values.hours] - the number of hours to be set\n * @param {Number} [values.minutes] - the number of minutes to be set\n * @param {Number} [values.seconds] - the number of seconds to be set\n * @param {Number} [values.milliseconds] - the number of milliseconds to be set\n * @returns {Date} the new date with options set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `values` must be an object\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * var result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * var result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\n\nexport default function set(dirtyDate, values) {\n  requiredArgs(2, arguments);\n\n  if (typeof values !== 'object' || values === null) {\n    throw new RangeError('values parameter must be an object');\n  }\n\n  var date = toDate(dirtyDate); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  }\n\n  if (values.year != null) {\n    date.setFullYear(values.year);\n  }\n\n  if (values.month != null) {\n    date = setMonth(date, values.month);\n  }\n\n  if (values.date != null) {\n    date.setDate(toInteger(values.date));\n  }\n\n  if (values.hours != null) {\n    date.setHours(toInteger(values.hours));\n  }\n\n  if (values.minutes != null) {\n    date.setMinutes(toInteger(values.minutes));\n  }\n\n  if (values.seconds != null) {\n    date.setSeconds(toInteger(values.seconds));\n  }\n\n  if (values.milliseconds != null) {\n    date.setMilliseconds(toInteger(values.milliseconds));\n  }\n\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setDate\n * @category Day Helpers\n * @summary Set the day of the month to the given date.\n *\n * @description\n * Set the day of the month to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} dayOfMonth - the day of the month of the new date\n * @returns {Date} the new date with the day of the month set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set the 30th day of the month to 1 September 2014:\n * var result = setDate(new Date(2014, 8, 1), 30)\n * //=> Tue Sep 30 2014 00:00:00\n */\n\nexport default function setDate(dirtyDate, dirtyDayOfMonth) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dayOfMonth = toInteger(dirtyDayOfMonth);\n  date.setDate(dayOfMonth);\n  return date;\n}","import addDays from '../addDays/index.js';\nimport toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setDay\n * @category Weekday Helpers\n * @summary Set the day of the week to the given date.\n *\n * @description\n * Set the day of the week to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} day - the day of the week of the new date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the new date with the day of the week set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // Set week day to Sunday, with the default weekStartsOn of Sunday:\n * var result = setDay(new Date(2014, 8, 1), 0)\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // Set week day to Sunday, with a weekStartsOn of Monday:\n * var result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\n\nexport default function setDay(dirtyDate, dirtyDay, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate, options);\n  var day = toInteger(dirtyDay);\n  var currentDay = date.getDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var delta = 7 - weekStartsOn;\n  var diff = day < 0 || day > 6 ? day - (currentDay + delta) % 7 : (dayIndex + delta) % 7 - (currentDay + delta) % 7;\n  return addDays(date, diff, options);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setDayOfYear\n * @category Day Helpers\n * @summary Set the day of the year to the given date.\n *\n * @description\n * Set the day of the year to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} dayOfYear - the day of the year of the new date\n * @returns {Date} the new date with the day of the year set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set the 2nd day of the year to 2 July 2014:\n * var result = setDayOfYear(new Date(2014, 6, 2), 2)\n * //=> Thu Jan 02 2014 00:00:00\n */\n\nexport default function setDayOfYear(dirtyDate, dirtyDayOfYear) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dayOfYear = toInteger(dirtyDayOfYear);\n  date.setMonth(0);\n  date.setDate(dayOfYear);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setHours\n * @category Hour Helpers\n * @summary Set the hours to the given date.\n *\n * @description\n * Set the hours to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} hours - the hours of the new date\n * @returns {Date} the new date with the hours set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 4 hours to 1 September 2014 11:30:00:\n * var result = setHours(new Date(2014, 8, 1, 11, 30), 4)\n * //=> Mon Sep 01 2014 04:30:00\n */\n\nexport default function setHours(dirtyDate, dirtyHours) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var hours = toInteger(dirtyHours);\n  date.setHours(hours);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport addDays from '../addDays/index.js';\nimport getISODay from '../getISODay/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setISODay\n * @category Weekday Helpers\n * @summary Set the day of the ISO week to the given date.\n *\n * @description\n * Set the day of the ISO week to the given date.\n * ISO week starts with Monday.\n * 7 is the index of Sunday, 1 is the index of Monday etc.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} day - the day of the ISO week of the new date\n * @returns {Date} the new date with the day of the ISO week set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set Sunday to 1 September 2014:\n * var result = setISODay(new Date(2014, 8, 1), 7)\n * //=> Sun Sep 07 2014 00:00:00\n */\n\nexport default function setISODay(dirtyDate, dirtyDay) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var day = toInteger(dirtyDay);\n  var currentDay = getISODay(date);\n  var diff = day - currentDay;\n  return addDays(date, diff);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport getISOWeek from '../getISOWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setISOWeek\n * @category ISO Week Helpers\n * @summary Set the ISO week to the given date.\n *\n * @description\n * Set the ISO week to the given date, saving the weekday number.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} isoWeek - the ISO week of the new date\n * @returns {Date} the new date with the ISO week set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set the 53rd ISO week to 7 August 2004:\n * var result = setISOWeek(new Date(2004, 7, 7), 53)\n * //=> Sat Jan 01 2005 00:00:00\n */\n\nexport default function setISOWeek(dirtyDate, dirtyISOWeek) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var isoWeek = toInteger(dirtyISOWeek);\n  var diff = getISOWeek(date) - isoWeek;\n  date.setDate(date.getDate() - diff * 7);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setMilliseconds\n * @category Millisecond Helpers\n * @summary Set the milliseconds to the given date.\n *\n * @description\n * Set the milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} milliseconds - the milliseconds of the new date\n * @returns {Date} the new date with the milliseconds set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 300 milliseconds to 1 September 2014 11:30:40.500:\n * var result = setMilliseconds(new Date(2014, 8, 1, 11, 30, 40, 500), 300)\n * //=> Mon Sep 01 2014 11:30:40.300\n */\n\nexport default function setMilliseconds(dirtyDate, dirtyMilliseconds) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var milliseconds = toInteger(dirtyMilliseconds);\n  date.setMilliseconds(milliseconds);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setMinutes\n * @category Minute Helpers\n * @summary Set the minutes to the given date.\n *\n * @description\n * Set the minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} minutes - the minutes of the new date\n * @returns {Date} the new date with the minutes set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 minutes to 1 September 2014 11:30:40:\n * var result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:45:40\n */\n\nexport default function setMinutes(dirtyDate, dirtyMinutes) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var minutes = toInteger(dirtyMinutes);\n  date.setMinutes(minutes);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport setMonth from '../setMonth/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setQuarter\n * @category Quarter Helpers\n * @summary Set the year quarter to the given date.\n *\n * @description\n * Set the year quarter to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} quarter - the quarter of the new date\n * @returns {Date} the new date with the quarter set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set the 2nd quarter to 2 July 2014:\n * var result = setQuarter(new Date(2014, 6, 2), 2)\n * //=> Wed Apr 02 2014 00:00:00\n */\n\nexport default function setQuarter(dirtyDate, dirtyQuarter) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var quarter = toInteger(dirtyQuarter);\n  var oldQuarter = Math.floor(date.getMonth() / 3) + 1;\n  var diff = quarter - oldQuarter;\n  return setMonth(date, date.getMonth() + diff * 3);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setSeconds\n * @category Second Helpers\n * @summary Set the seconds to the given date.\n *\n * @description\n * Set the seconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} seconds - the seconds of the new date\n * @returns {Date} the new date with the seconds set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 seconds to 1 September 2014 11:30:40:\n * var result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:30:45\n */\n\nexport default function setSeconds(dirtyDate, dirtySeconds) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var seconds = toInteger(dirtySeconds);\n  date.setSeconds(seconds);\n  return date;\n}","import getWeek from '../getWeek/index.js';\nimport toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setWeek\n * @category Week Helpers\n * @summary Set the local week to the given date.\n *\n * @description\n * Set the local week to the given date, saving the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} week - the week of the new date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Date} the new date with the local week set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // Set the 1st week to 2 January 2005 with default options:\n * var result = setWeek(new Date(2005, 0, 2), 1)\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // Set the 1st week to 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January:\n * var result = setWeek(new Date(2005, 0, 2), 1, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sun Jan 4 2004 00:00:00\n */\n\nexport default function setWeek(dirtyDate, dirtyWeek, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var week = toInteger(dirtyWeek);\n  var diff = getWeek(date, dirtyOptions) - week;\n  date.setDate(date.getDate() - diff * 7);\n  return date;\n}","import differenceInCalendarDays from '../differenceInCalendarDays/index.js';\nimport startOfWeekYear from '../startOfWeekYear/index.js';\nimport toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Set the local week-numbering year to the given date.\n *\n * @description\n * Set the local week-numbering year to the given date,\n * saving the week number and the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} weekYear - the local week-numbering year of the new date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Date} the new date with the local week-numbering year set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // Set the local week-numbering year 2004 to 2 January 2010 with default options:\n * var result = setWeekYear(new Date(2010, 0, 2), 2004)\n * //=> Sat Jan 03 2004 00:00:00\n *\n * @example\n * // Set the local week-numbering year 2004 to 2 January 2010,\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * var result = setWeekYear(new Date(2010, 0, 2), 2004, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sat Jan 01 2005 00:00:00\n */\n\nexport default function setWeekYear(dirtyDate, dirtyWeekYear, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var date = toDate(dirtyDate);\n  var weekYear = toInteger(dirtyWeekYear);\n  var diff = differenceInCalendarDays(date, startOfWeekYear(date, dirtyOptions));\n  var firstWeek = new Date(0);\n  firstWeek.setFullYear(weekYear, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  date = startOfWeekYear(firstWeek, dirtyOptions);\n  date.setDate(date.getDate() + diff);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setYear\n * @category Year Helpers\n * @summary Set the year to the given date.\n *\n * @description\n * Set the year to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} year - the year of the new date\n * @returns {Date} the new date with the year set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set year 2013 to 1 September 2014:\n * var result = setYear(new Date(2014, 8, 1), 2013)\n * //=> Sun Sep 01 2013 00:00:00\n */\n\nexport default function setYear(dirtyDate, dirtyYear) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var year = toInteger(dirtyYear); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  }\n\n  date.setFullYear(year);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfDecade\n * @category Decade Helpers\n * @summary Return the start of a decade for the given date.\n *\n * @description\n * Return the start of a decade for the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a decade\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a decade for 21 October 2015 00:00:00:\n * var result = startOfDecade(new Date(2015, 9, 21, 00, 00, 00))\n * //=> Jan 01 2010 00:00:00\n */\n\nexport default function startOfDecade(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var decade = Math.floor(year / 10) * 10;\n  date.setFullYear(decade, 0, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import startOfDay from '../startOfDay/index.js';\n/**\n * @name startOfToday\n * @category Day Helpers\n * @summary Return the start of today.\n * @pure false\n *\n * @description\n * Return the start of today.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the start of today\n *\n * @example\n * // If today is 6 October 2014:\n * var result = startOfToday()\n * //=> Mon Oct 6 2014 00:00:00\n */\n\nexport default function startOfToday() {\n  return startOfDay(Date.now());\n}","/**\n * @name startOfTomorrow\n * @category Day Helpers\n * @summary Return the start of tomorrow.\n * @pure false\n *\n * @description\n * Return the start of tomorrow.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `new Date()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the start of tomorrow\n *\n * @example\n * // If today is 6 October 2014:\n * var result = startOfTomorrow()\n * //=> Tue Oct 7 2014 00:00:00\n */\nexport default function startOfTomorrow() {\n  var now = new Date();\n  var year = now.getFullYear();\n  var month = now.getMonth();\n  var day = now.getDate();\n  var date = new Date(0);\n  date.setFullYear(year, month, day + 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","/**\n * @name startOfYesterday\n * @category Day Helpers\n * @summary Return the start of yesterday.\n * @pure false\n *\n * @description\n * Return the start of yesterday.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `new Date()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the start of yesterday\n *\n * @example\n * // If today is 6 October 2014:\n * var result = startOfYesterday()\n * //=> Sun Oct 5 2014 00:00:00\n */\nexport default function startOfYesterday() {\n  var now = new Date();\n  var year = now.getFullYear();\n  var month = now.getMonth();\n  var day = now.getDate();\n  var date = new Date(0);\n  date.setFullYear(year, month, day - 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addBusinessDays from '../addBusinessDays/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subBusinessDays\n * @category Day Helpers\n * @summary Substract the specified number of business days (mon - fri) to the given date.\n *\n * @description\n * Substract the specified number of business days (mon - fri) to the given date, ignoring weekends.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of business days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the business days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Substract 10 business days from 1 September 2014:\n * var result = subBusinessDays(new Date(2014, 8, 1), 10)\n * //=> Mon Aug 18 2014 00:00:00 (skipped weekend days)\n */\n\nexport default function subBusinessDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addBusinessDays(dirtyDate, -amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addHours from '../addHours/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subHours\n * @category Hour Helpers\n * @summary Subtract the specified number of hours from the given date.\n *\n * @description\n * Subtract the specified number of hours from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of hours to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the hours subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 2 hours from 11 July 2014 01:00:00:\n * var result = subHours(new Date(2014, 6, 11, 1, 0), 2)\n * //=> Thu Jul 10 2014 23:00:00\n */\n\nexport default function subHours(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addHours(dirtyDate, -amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMinutes from '../addMinutes/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subMinutes\n * @category Minute Helpers\n * @summary Subtract the specified number of minutes from the given date.\n *\n * @description\n * Subtract the specified number of minutes from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 30 minutes from 10 July 2014 12:00:00:\n * var result = subMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 11:30:00\n */\n\nexport default function subMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMinutes(dirtyDate, -amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addQuarters from '../addQuarters/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subQuarters\n * @category Quarter Helpers\n * @summary Subtract the specified number of year quarters from the given date.\n *\n * @description\n * Subtract the specified number of year quarters from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of quarters to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the quarters subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 3 quarters from 1 September 2014:\n * var result = subQuarters(new Date(2014, 8, 1), 3)\n * //=> Sun Dec 01 2013 00:00:00\n */\n\nexport default function subQuarters(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addQuarters(dirtyDate, -amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addSeconds from '../addSeconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subSeconds\n * @category Second Helpers\n * @summary Subtract the specified number of seconds from the given date.\n *\n * @description\n * Subtract the specified number of seconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of seconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the seconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 30 seconds from 10 July 2014 12:45:00:\n * var result = subSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:44:30\n */\n\nexport default function subSeconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addSeconds(dirtyDate, -amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addWeeks from '../addWeeks/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subWeeks\n * @category Week Helpers\n * @summary Subtract the specified number of weeks from the given date.\n *\n * @description\n * Subtract the specified number of weeks from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 4 weeks from 1 September 2014:\n * var result = subWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Aug 04 2014 00:00:00\n */\n\nexport default function subWeeks(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addWeeks(dirtyDate, -amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addYears from '../addYears/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subYears\n * @category Year Helpers\n * @summary Subtract the specified number of years from the given date.\n *\n * @description\n * Subtract the specified number of years from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 years from 1 September 2014:\n * var result = subYears(new Date(2014, 8, 1), 5)\n * //=> Tue Sep 01 2009 00:00:00\n */\n\nexport default function subYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addYears(dirtyDate, -amount);\n}","/**\n *  Maximum allowed time.\n *  @constant\n *  @type {number}\n *  @default\n */\nexport var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n/**\n *  Minimum allowed time.\n *  @constant\n *  @type {number}\n *  @default\n */\n\nexport var minTime = -maxTime;","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Manages the lifecycle of a terminal extension, and provides\r\n * access to the `xterm.js` and `TerminalCommander` instances.\r\n */\r\nclass NrfTerminalAddon {\r\n    constructor(commander) {\r\n        this.commander = commander;\r\n    }\r\n    debug(message, ...meta) {\r\n        console.debug(`[${this.name}] ${message}`, meta);\r\n    }\r\n    activate(terminal) {\r\n        console.info(`Loaded ${this.name}`);\r\n        this.terminal = terminal;\r\n        this.onActivate();\r\n    }\r\n    dispose() {\r\n        console.debug(`Disposing of ${this.name}`);\r\n    }\r\n}\r\nexports.default = NrfTerminalAddon;\r\n","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nvar _terminal, _prompt, _config, _historyAddon, _lineSpan, _lineCount, _userInput_1, _registeredCommands, _userInputChangeListeners, _runCommandListeners;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst ansi = __importStar(require(\"ansi-escapes\"));\r\nconst Prompt_1 = __importDefault(require(\"./Prompt\"));\r\nconst HistoryAddon_1 = __importDefault(require(\"./addons/HistoryAddon\"));\r\nconst TimestampAddon_1 = __importDefault(require(\"./addons/TimestampAddon\"));\r\nconst CopyPasteAddon_1 = __importDefault(require(\"./addons/CopyPasteAddon\"));\r\nconst AutocompleteAddon_1 = __importDefault(require(\"./addons/AutocompleteAddon\"));\r\nconst utils_1 = require(\"./utils\");\r\nconst HoverAddon_1 = __importDefault(require(\"./addons/HoverAddon\"));\r\n/**\r\n * Contains logic and control code for the most common terminal tasks,\r\n * like typing, moving the caret, and running commands.\r\n *\r\n * Some of this logic is exposed as public methods, allowing addons\r\n * to make use of it.\r\n *\r\n * Those same addons are loaded as part of this addon's activation\r\n * process, so this class can be thought of as the \"root\" of the\r\n * addon tree.\r\n */\r\nclass NrfTerminalCommander {\r\n    constructor(config) {\r\n        _terminal.set(this, void 0);\r\n        _prompt.set(this, void 0);\r\n        _config.set(this, void 0);\r\n        _historyAddon.set(this, void 0);\r\n        _lineSpan.set(this, 0);\r\n        _lineCount.set(this, 1);\r\n        _userInput_1.set(this, '');\r\n        _registeredCommands.set(this, {});\r\n        _userInputChangeListeners.set(this, []);\r\n        _runCommandListeners.set(this, []);\r\n        __classPrivateFieldSet(this, _config, config);\r\n        __classPrivateFieldSet(this, _prompt, new Prompt_1.default(this, config.prompt));\r\n    }\r\n    activate(terminal) {\r\n        __classPrivateFieldSet(this, _terminal, terminal);\r\n        const historyAddon = new HistoryAddon_1.default(this);\r\n        __classPrivateFieldSet(this, _historyAddon, historyAddon);\r\n        __classPrivateFieldGet(this, _terminal).loadAddon(historyAddon);\r\n        if (__classPrivateFieldGet(this, _config).showTimestamps) {\r\n            const timestampAddon = new TimestampAddon_1.default(this);\r\n            __classPrivateFieldGet(this, _terminal).loadAddon(timestampAddon);\r\n            this.registerCommand('toggle_timestamps', () => {\r\n                timestampAddon.toggleTimestamps();\r\n            });\r\n        }\r\n        const copyPasteAddon = new CopyPasteAddon_1.default(this);\r\n        __classPrivateFieldGet(this, _terminal).loadAddon(copyPasteAddon);\r\n        const autocompleteAddon = new AutocompleteAddon_1.default(this, __classPrivateFieldGet(this, _config).completerFunction);\r\n        __classPrivateFieldGet(this, _terminal).loadAddon(autocompleteAddon);\r\n        this.autocompleteAddon = autocompleteAddon;\r\n        const hoverAddon = new HoverAddon_1.default(this, []);\r\n        __classPrivateFieldGet(this, _terminal).loadAddon(hoverAddon);\r\n        __classPrivateFieldGet(this, _terminal).onKey(this.onKey.bind(this));\r\n        __classPrivateFieldGet(this, _terminal).onData(this.onData.bind(this));\r\n        this.registerCommand('show_history', () => {\r\n            console.log(historyAddon.history);\r\n        });\r\n        this.registerCommand('clear_history', () => {\r\n            historyAddon.clearHistory();\r\n        });\r\n        this.registerCustomCommands();\r\n    }\r\n    dispose() {\r\n        return false;\r\n    }\r\n    /**\r\n     * The current user input.\r\n     */\r\n    get userInput() {\r\n        return __classPrivateFieldGet(this, _userInput_1);\r\n    }\r\n    set _userInput(newUserInput) {\r\n        __classPrivateFieldSet(this, _userInput_1, newUserInput);\r\n        __classPrivateFieldGet(this, _userInputChangeListeners).forEach(l => l(this.userInput));\r\n    }\r\n    /**\r\n     * The number of lines spanned by the current command.\r\n     */\r\n    get lineSpan() {\r\n        return __classPrivateFieldGet(this, _lineSpan);\r\n    }\r\n    get lineCount() {\r\n        return __classPrivateFieldGet(this, _lineCount);\r\n    }\r\n    get prompt() {\r\n        return __classPrivateFieldGet(this, _prompt);\r\n    }\r\n    /**\r\n     * Registers the given `command` in the terminal, such that when it is\r\n     * executed `callback` is run.\r\n     * @param command The command to listen for.\r\n     * @param callback The function to run when the command is given.\r\n     */\r\n    registerCommand(command, callback) {\r\n        __classPrivateFieldGet(this, _registeredCommands)[command] = callback;\r\n    }\r\n    /**\r\n     * Registers all custom commands from the provided config\r\n     */\r\n    registerCustomCommands() {\r\n        for (const [command, callback] of Object.entries(__classPrivateFieldGet(this, _config).commands)) {\r\n            this.registerCommand(command, callback);\r\n        }\r\n    }\r\n    /**\r\n     * Registers a function that will be called whenever the user input changes,\r\n     * with the new user input.\r\n     * @param listener The function to call when the user input changes.\r\n     * @returns a function to unregister the listener\r\n     */\r\n    onUserInputChange(listener) {\r\n        __classPrivateFieldGet(this, _userInputChangeListeners).push(listener);\r\n        return () => (__classPrivateFieldSet(this, _userInputChangeListeners, __classPrivateFieldGet(this, _userInputChangeListeners).filter(l => l !== listener)));\r\n    }\r\n    /**\r\n     * Registers a function that will be called whenever the a command is run,\r\n     * with the command value.\r\n     * @param listener The function to call when a command is run.\r\n     * @returns a function to unregister the listener\r\n     */\r\n    onRunCommand(listener) {\r\n        __classPrivateFieldGet(this, _runCommandListeners).push(listener);\r\n        return () => (__classPrivateFieldSet(this, _runCommandListeners, __classPrivateFieldGet(this, _runCommandListeners).filter(l => l !== listener)));\r\n    }\r\n    /**\r\n     * Replaces the user input currently being entered into the buffer.\r\n     * @param newUserInput The user input written to the screen. Defaults to an empty string.\r\n     */\r\n    replaceUserInput(newUserInput = '') {\r\n        this.clearUserInput();\r\n        __classPrivateFieldGet(this, _terminal).write(newUserInput);\r\n        this._userInput = newUserInput;\r\n    }\r\n    /**\r\n     * Returns `true` if the cursor is placed at the beginning of\r\n     * the line (i.e. right after the prompt), otherwise `false`.\r\n     */\r\n    atBeginningOfLine() {\r\n        const buffer = __classPrivateFieldGet(this, _terminal).buffer.active;\r\n        return buffer.cursorX <= __classPrivateFieldGet(this, _prompt).length - 2;\r\n    }\r\n    /**\r\n     * Returns `true` if the cursor is placed at the end of\r\n     * the line (i.e. one character after the final one typed),\r\n     * otherwise `false`.\r\n     */\r\n    atEndOfLine() {\r\n        const maxRightCursor = __classPrivateFieldGet(this, _prompt).length - 2 + this.userInput.length;\r\n        const buffer = __classPrivateFieldGet(this, _terminal).buffer.active;\r\n        return buffer.cursorX >= maxRightCursor;\r\n    }\r\n    /**\r\n     * Removes all the typed characters on the current line, and\r\n     * moves the cursor to the beginning.\r\n     */\r\n    clearUserInput() {\r\n        __classPrivateFieldGet(this, _terminal).write(ansi.cursorTo(__classPrivateFieldGet(this, _prompt).length - 2));\r\n        __classPrivateFieldGet(this, _terminal).write(ansi.eraseEndLine);\r\n    }\r\n    backspace() {\r\n        if (!this.atBeginningOfLine()) {\r\n            __classPrivateFieldGet(this, _terminal).write('\\b \\b');\r\n            this._userInput = this.userInput.slice(0, this.userInput.length - 1);\r\n        }\r\n    }\r\n    moveCaretLeft() {\r\n        if (!this.atBeginningOfLine()) {\r\n            __classPrivateFieldGet(this, _terminal).write(ansi.cursorBackward(1));\r\n        }\r\n    }\r\n    moveCaretRight() {\r\n        if (!this.atEndOfLine()) {\r\n            __classPrivateFieldGet(this, _terminal).write(ansi.cursorForward(1));\r\n        }\r\n    }\r\n    runCommand(cmd) {\r\n        const command = cmd || this.userInput.trim();\r\n        if (command.length) {\r\n            const callback = __classPrivateFieldGet(this, _registeredCommands)[command];\r\n            if (callback) {\r\n                callback();\r\n            }\r\n            else if (__classPrivateFieldGet(this, _config).unspecifiedCommandHandler) {\r\n                __classPrivateFieldGet(this, _config).unspecifiedCommandHandler(command);\r\n            }\r\n            __classPrivateFieldGet(this, _runCommandListeners).forEach(l => l(command));\r\n        }\r\n        this.breakCurrentCommand();\r\n    }\r\n    /**\r\n     * Prints a new prompt and removes the currently entered\r\n     * text. Useful whenever a new line of input needs to be\r\n     * started, i.e. because a command was just run.\r\n     */\r\n    breakCurrentCommand() {\r\n        __classPrivateFieldSet(this, _lineCount, __classPrivateFieldGet(this, _lineCount) + 1);\r\n        __classPrivateFieldGet(this, _terminal).write(__classPrivateFieldGet(this, _prompt).value);\r\n        __classPrivateFieldGet(this, _historyAddon).resetCursor();\r\n        this._userInput = '';\r\n    }\r\n    onData(data) {\r\n        switch (utils_1.charCode(data)) {\r\n            case utils_1.CharCodes.CTRL_C:\r\n            case utils_1.CharCodes.ARROW_KEY:\r\n                return;\r\n            case utils_1.CharCodes.BACKSPACE:\r\n                return this.backspace();\r\n            case utils_1.CharCodes.LF:\r\n                if (!this.autocompleteAddon.isVisible) {\r\n                    return this.runCommand();\r\n                }\r\n        }\r\n        this._userInput = this.userInput + data;\r\n        this.updateLineSpan();\r\n        this.autocompleteAddon.enable();\r\n        __classPrivateFieldGet(this, _terminal).write(data);\r\n    }\r\n    onKey(e) {\r\n        switch (e.domEvent.code) {\r\n            case 'ArrowLeft': {\r\n                return this.moveCaretLeft();\r\n            }\r\n            case 'ArrowRight': {\r\n                return this.moveCaretRight();\r\n            }\r\n            case 'KeyC': {\r\n                if (!e.domEvent.ctrlKey)\r\n                    break;\r\n                // On Windows and Linux, pressing Ctrl-C when text is selected\r\n                // should copy that text rather than breaking the line.\r\n                if (!utils_1.isMac() && __classPrivateFieldGet(this, _terminal).getSelection().length)\r\n                    break;\r\n                this.breakCurrentCommand();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    updateLineSpan() {\r\n        const delta = __classPrivateFieldGet(this, _terminal).cols - __classPrivateFieldGet(this, _prompt).length;\r\n        __classPrivateFieldSet(this, _lineSpan, Math.floor(this.userInput.length / delta));\r\n    }\r\n}\r\nexports.default = NrfTerminalCommander;\r\n_terminal = new WeakMap(), _prompt = new WeakMap(), _config = new WeakMap(), _historyAddon = new WeakMap(), _lineSpan = new WeakMap(), _lineCount = new WeakMap(), _userInput_1 = new WeakMap(), _registeredCommands = new WeakMap(), _userInputChangeListeners = new WeakMap(), _runCommandListeners = new WeakMap();\r\n","\"use strict\";\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n};\r\nvar _template, _commander;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils_1 = require(\"./utils\");\r\nclass Prompt {\r\n    constructor(commander, template) {\r\n        _template.set(this, void 0);\r\n        _commander.set(this, void 0);\r\n        __classPrivateFieldSet(this, _template, `\\n\\r${template} `);\r\n        __classPrivateFieldSet(this, _commander, commander);\r\n    }\r\n    get value() {\r\n        return __classPrivateFieldGet(this, _template).replace(':lineCount', __classPrivateFieldGet(this, _commander).lineCount.toString());\r\n    }\r\n    get length() {\r\n        return utils_1.stripAnsiCodes(this.value).length;\r\n    }\r\n}\r\nexports.default = Prompt;\r\n_template = new WeakMap(), _commander = new WeakMap();\r\n","\"use strict\";\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nvar _suggestions, _root, _container, _completerFunction, _highlightedIndex, _prevUserInput, _hasCancelled;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst NrfTerminalAddon_1 = __importDefault(require(\"../NrfTerminalAddon\"));\r\nconst HIGHLIGHTED_CLASS = 'autocomplete__suggestion--highlighted';\r\nclass AutocompleteAddon extends NrfTerminalAddon_1.default {\r\n    constructor(commander, completer) {\r\n        super(commander);\r\n        this.name = 'AutocompleteAddon';\r\n        _suggestions.set(this, []);\r\n        _root.set(this, void 0);\r\n        _container.set(this, void 0);\r\n        _completerFunction.set(this, void 0);\r\n        _highlightedIndex.set(this, 0);\r\n        _prevUserInput.set(this, '');\r\n        _hasCancelled.set(this, false);\r\n        __classPrivateFieldSet(this, _completerFunction, completer);\r\n    }\r\n    get isVisible() {\r\n        return __classPrivateFieldGet(this, _suggestions).length > 0;\r\n    }\r\n    disable() {\r\n        __classPrivateFieldSet(this, _hasCancelled, true);\r\n    }\r\n    enable() {\r\n        __classPrivateFieldSet(this, _hasCancelled, false);\r\n    }\r\n    get completions() {\r\n        return __classPrivateFieldGet(this, _completerFunction).call(this, this.commander.userInput);\r\n    }\r\n    onActivate() {\r\n        this.commander.onUserInputChange(userInput => {\r\n            if (!__classPrivateFieldGet(this, _container)) {\r\n                this.initialiseContainer();\r\n            }\r\n            if (!__classPrivateFieldGet(this, _hasCancelled)) {\r\n                this.patchSuggestionBox(userInput);\r\n                this.repositionX(userInput);\r\n                this.repositionY(this.commander.lineCount);\r\n            }\r\n        });\r\n        this.terminal.onKey(({ domEvent }) => {\r\n            switch (domEvent.code) {\r\n                case 'ArrowUp':\r\n                    if (this.isVisible)\r\n                        return this.navigateUp();\r\n                case 'ArrowDown':\r\n                    if (this.isVisible)\r\n                        return this.navigateDown();\r\n                case 'Escape':\r\n                    __classPrivateFieldSet(this, _hasCancelled, true);\r\n                    return this.clearSuggestions();\r\n                case 'Enter':\r\n                    if (this.isVisible)\r\n                        return this.selectSuggestion(__classPrivateFieldGet(this, _highlightedIndex));\r\n                // Swallow backspace keys so they don't revert the cancel.\r\n                // This way the dialog will only appear again on a real keypress.\r\n                case 'Backspace':\r\n                    return;\r\n            }\r\n            __classPrivateFieldSet(this, _hasCancelled, false);\r\n        });\r\n    }\r\n    initialiseContainer() {\r\n        if (!this.terminal.element) {\r\n            this.debug('Terminal must be fully loaded');\r\n            return;\r\n        }\r\n        const autocompleteRoot = document.createElement('div');\r\n        autocompleteRoot.className = 'autocomplete';\r\n        __classPrivateFieldSet(this, _root, autocompleteRoot);\r\n        const suggestionsContainer = document.createElement('ul');\r\n        suggestionsContainer.className = 'autocomplete__suggestions';\r\n        autocompleteRoot.appendChild(suggestionsContainer);\r\n        this.terminal.element.appendChild(autocompleteRoot);\r\n        __classPrivateFieldSet(this, _container, suggestionsContainer);\r\n    }\r\n    navigateUp() {\r\n        // If we're already on the first item, loop back to the last.\r\n        if (__classPrivateFieldGet(this, _highlightedIndex) === 0) {\r\n            this.highlightSuggestion(__classPrivateFieldGet(this, _suggestions).length - 1);\r\n        }\r\n        else {\r\n            this.highlightSuggestion(__classPrivateFieldGet(this, _highlightedIndex) - 1);\r\n        }\r\n    }\r\n    navigateDown() {\r\n        // If we're already on the last item, loop back to the start.\r\n        if (__classPrivateFieldGet(this, _highlightedIndex) === __classPrivateFieldGet(this, _suggestions).length - 1) {\r\n            this.highlightSuggestion(0);\r\n        }\r\n        else {\r\n            this.highlightSuggestion(__classPrivateFieldGet(this, _highlightedIndex) + 1);\r\n        }\r\n    }\r\n    selectSuggestion(id) {\r\n        const { value } = this.completions[id];\r\n        this.commander.replaceUserInput(value);\r\n        this.clearSuggestions();\r\n    }\r\n    patchSuggestionBox(userInput) {\r\n        if (!userInput.length) {\r\n            this.clearSuggestions();\r\n            return;\r\n        }\r\n        for (let i = 0; i < this.completions.length; i += 1) {\r\n            const completion = this.completions[i];\r\n            const isMatch = completion.value.startsWith(userInput);\r\n            const alreadyShowing = __classPrivateFieldGet(this, _suggestions).includes(i);\r\n            if (isMatch && alreadyShowing) {\r\n                if (userInput.length < __classPrivateFieldGet(this, _prevUserInput).length) {\r\n                    this.shrinkMatch(i);\r\n                }\r\n                else {\r\n                    this.growMatch(i);\r\n                }\r\n            }\r\n            else if (isMatch && !alreadyShowing) {\r\n                this.addSuggestion(i, userInput);\r\n            }\r\n            else if (!isMatch && alreadyShowing) {\r\n                this.removeSuggestion(i);\r\n            }\r\n        }\r\n        __classPrivateFieldSet(this, _prevUserInput, userInput);\r\n    }\r\n    addSuggestion(id, userInput) {\r\n        var _a;\r\n        const { value: suggestionValue } = this.completions[id];\r\n        const matchedSpan = document.createElement('span');\r\n        matchedSpan.textContent = userInput;\r\n        matchedSpan.className = 'font-weight-bolder';\r\n        matchedSpan.dataset.type = 'matched';\r\n        const unmatchedSpan = document.createElement('span');\r\n        const regex = new RegExp(`^${userInput}`, 'gm');\r\n        const unmatchedFragment = suggestionValue.split(regex)[1];\r\n        unmatchedSpan.textContent = unmatchedFragment;\r\n        unmatchedSpan.dataset.type = 'unmatched';\r\n        const suggestionLi = document.createElement('li');\r\n        suggestionLi.classList.add('autocomplete__suggestion');\r\n        suggestionLi.appendChild(matchedSpan);\r\n        suggestionLi.appendChild(unmatchedSpan);\r\n        suggestionLi.dataset.suggestionId = id.toString();\r\n        if (__classPrivateFieldGet(this, _highlightedIndex) === id) {\r\n            suggestionLi.classList.add(HIGHLIGHTED_CLASS);\r\n        }\r\n        (_a = __classPrivateFieldGet(this, _container)) === null || _a === void 0 ? void 0 : _a.appendChild(suggestionLi);\r\n        __classPrivateFieldGet(this, _suggestions).push(id);\r\n    }\r\n    removeSuggestion(id) {\r\n        var _a;\r\n        const suggestion = this.getSuggestionElement(id);\r\n        (_a = __classPrivateFieldGet(this, _container)) === null || _a === void 0 ? void 0 : _a.removeChild(suggestion);\r\n        __classPrivateFieldSet(this, _suggestions, __classPrivateFieldGet(this, _suggestions).filter(i => i !== id));\r\n    }\r\n    growMatch(id) {\r\n        const suggestion = this.getSuggestionElement(id);\r\n        const [matched, unmatched] = suggestion.querySelectorAll('span');\r\n        matched.textContent += unmatched.textContent[0];\r\n        unmatched.textContent = unmatched.textContent.slice(1);\r\n    }\r\n    shrinkMatch(id) {\r\n        const suggestion = this.getSuggestionElement(id);\r\n        const [matched, unmatched] = suggestion.querySelectorAll('span');\r\n        const lastCharacter = matched.textContent.slice(-1);\r\n        matched.textContent = matched.textContent.slice(0, -1);\r\n        unmatched.textContent = lastCharacter + unmatched.textContent;\r\n    }\r\n    highlightSuggestion(id) {\r\n        const prev = this.getSuggestionElement(__classPrivateFieldGet(this, _highlightedIndex));\r\n        prev.classList.remove(HIGHLIGHTED_CLASS);\r\n        const current = this.getSuggestionElement(id);\r\n        current.classList.add(HIGHLIGHTED_CLASS);\r\n        __classPrivateFieldSet(this, _highlightedIndex, id);\r\n    }\r\n    clearSuggestions() {\r\n        if (!__classPrivateFieldGet(this, _container))\r\n            return;\r\n        __classPrivateFieldGet(this, _container).innerHTML = '';\r\n        __classPrivateFieldSet(this, _suggestions, []);\r\n        __classPrivateFieldSet(this, _highlightedIndex, 0);\r\n    }\r\n    getSuggestionElement(id) {\r\n        var _a;\r\n        const suggestionLi = (_a = __classPrivateFieldGet(this, _container)) === null || _a === void 0 ? void 0 : _a.querySelector(`[data-suggestion-id=\"${id}\"]`);\r\n        if (!suggestionLi) {\r\n            throw new Error(`No suggestion element with index ${id} found`);\r\n        }\r\n        return suggestionLi;\r\n    }\r\n    repositionX(userInput) {\r\n        const left = userInput.length * 3.5 + 80 + (5 * userInput.length - 1) - 3.5;\r\n        __classPrivateFieldGet(this, _root).style.left = `${left}px`;\r\n    }\r\n    repositionY(lineNo) {\r\n        const top = lineNo * 37;\r\n        __classPrivateFieldGet(this, _root).style.top = `${top}px`;\r\n    }\r\n}\r\nexports.default = AutocompleteAddon;\r\n_suggestions = new WeakMap(), _root = new WeakMap(), _container = new WeakMap(), _completerFunction = new WeakMap(), _highlightedIndex = new WeakMap(), _prevUserInput = new WeakMap(), _hasCancelled = new WeakMap();\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst NrfTerminalAddon_1 = __importDefault(require(\"../NrfTerminalAddon\"));\r\nconst utils_1 = require(\"../utils\");\r\n/**\r\n * Adds copy-paste functionality to the terminal, guaranteed to work\r\n * consistently across platforms. On a Mac, the addon is not\r\n * initialised, since the required functionality works out of the box.\r\n *\r\n * The registered shortcuts on Windows and Linux are Ctrl-C for copy,\r\n * and Ctrl-V for paste. On a Mac, the Cmd key replaces the Ctrl key.\r\n */\r\nclass CopyPasteAddon extends NrfTerminalAddon_1.default {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = 'CopyPasteAddon';\r\n    }\r\n    onActivate() {\r\n        if (utils_1.isMac())\r\n            return;\r\n        this.terminal.onKey(async ({ domEvent }) => {\r\n            if (isCopy(domEvent)) {\r\n                document.execCommand('copy');\r\n            }\r\n            if (isPaste(domEvent)) {\r\n                navigator.clipboard.readText().then(clipText => {\r\n                    const lines = clipText.split('\\n');\r\n                    const remainder = lines.pop();\r\n                    lines.forEach(line => {\r\n                        this.terminal.paste(line);\r\n                        this.commander.runCommand(line.trim());\r\n                    });\r\n                    this.commander.replaceUserInput(remainder);\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.default = CopyPasteAddon;\r\nfunction isCopy(e) {\r\n    return e.ctrlKey && e.code === 'KeyC';\r\n}\r\nfunction isPaste(e) {\r\n    return e.ctrlKey && e.code === 'KeyV';\r\n}\r\n","\"use strict\";\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n};\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nvar _history, _currentIndex;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils_1 = require(\"../utils\");\r\nconst NrfTerminalAddon_1 = __importDefault(require(\"../NrfTerminalAddon\"));\r\nclass HistoryAddon extends NrfTerminalAddon_1.default {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = 'HistoryAddon';\r\n        _history.set(this, []);\r\n        _currentIndex.set(this, -1);\r\n    }\r\n    onActivate() {\r\n        this.commander.onRunCommand((command) => {\r\n            this.addToHistory(command);\r\n        });\r\n        this.terminal.onData(data => {\r\n            if (utils_1.charCode(data) === utils_1.CharCodes.LF &&\r\n                this.commander.userInput.trim().length) {\r\n                this.resetCursor();\r\n            }\r\n        });\r\n        this.terminal.onKey(e => {\r\n            if (!this.commander.autocompleteAddon.isVisible) {\r\n                // Don't show the autocomplete dialog when travelling through time.\r\n                this.commander.autocompleteAddon.disable();\r\n                switch (e.domEvent.key) {\r\n                    case 'ArrowUp':\r\n                        return this.moveBackwards();\r\n                    case 'ArrowDown':\r\n                        return this.moveForwards();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    addToHistory(command) {\r\n        const latestEntry = __classPrivateFieldGet(this, _history)[0];\r\n        if (latestEntry === command || command.trim() === '') {\r\n            return;\r\n        }\r\n        __classPrivateFieldGet(this, _history).unshift(command);\r\n    }\r\n    moveForwards() {\r\n        if (__classPrivateFieldGet(this, _currentIndex) < 0)\r\n            return;\r\n        __classPrivateFieldSet(this, _currentIndex, __classPrivateFieldGet(this, _currentIndex) - 1);\r\n        const command = __classPrivateFieldGet(this, _currentIndex) === -1 ? '' : this.currentCommand;\r\n        this.commander.replaceUserInput(command);\r\n    }\r\n    moveBackwards() {\r\n        if (__classPrivateFieldGet(this, _currentIndex) >= this.history.length - 1)\r\n            return;\r\n        __classPrivateFieldSet(this, _currentIndex, __classPrivateFieldGet(this, _currentIndex) + 1);\r\n        this.commander.replaceUserInput(this.currentCommand);\r\n    }\r\n    /**\r\n     * A list of commands saved to the history list.\r\n     */\r\n    get history() {\r\n        return __classPrivateFieldGet(this, _history);\r\n    }\r\n    /**\r\n     * The command at the current history position.\r\n     */\r\n    get currentCommand() {\r\n        return this.history[__classPrivateFieldGet(this, _currentIndex)];\r\n    }\r\n    /**\r\n     * Moves the position in the history to the front, so the last\r\n     * command to be saved will be the next one returned.\r\n     */\r\n    resetCursor() {\r\n        __classPrivateFieldSet(this, _currentIndex, -1);\r\n    }\r\n    /**\r\n     * Removes all the commands saved into the history list.\r\n     */\r\n    clearHistory() {\r\n        __classPrivateFieldSet(this, _history, []);\r\n        __classPrivateFieldSet(this, _currentIndex, -1);\r\n    }\r\n}\r\nexports.default = HistoryAddon;\r\n_history = new WeakMap(), _currentIndex = new WeakMap();\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst NrfTerminalAddon_1 = __importDefault(require(\"../NrfTerminalAddon\"));\r\nclass HoverAddon extends NrfTerminalAddon_1.default {\r\n    constructor(commander, hoverMetadata) {\r\n        super(commander);\r\n        this.name = 'HoverAddon';\r\n        this.hoverMetadata = hoverMetadata;\r\n    }\r\n    onActivate() {\r\n        const r = new RegExp('I will match');\r\n        this.terminal.registerLinkMatcher(r, (e, uri) => {\r\n            console.log('You clicked on the special matching phrase');\r\n        });\r\n    }\r\n}\r\nexports.default = HoverAddon;\r\n","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n};\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nvar _showTimestamps;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst dateFns = __importStar(require(\"date-fns\"));\r\nconst c = __importStar(require(\"ansi-colors\"));\r\nconst ansi = __importStar(require(\"ansi-escapes\"));\r\nconst NrfTerminalAddon_1 = __importDefault(require(\"../NrfTerminalAddon\"));\r\nconst utils_1 = require(\"../utils\");\r\n/**\r\n * Prints the date and time a command was executed at the\r\n * rightmost edge of the screen.\r\n *\r\n * The format of the displayed timestamp can be set by\r\n * passing an alternative string to the constructor, or\r\n * by changing the `format` property at any time. By default, the\r\n * format is `HH:mm:ss`.\r\n *\r\n * Timestamps can be toggled using the `toggleTimestamps` method,\r\n * or by using the `\"toggle_timestamps\"` command registered by\r\n * this addon.\r\n */\r\nclass TimestampAddon extends NrfTerminalAddon_1.default {\r\n    constructor(commander, format) {\r\n        super(commander);\r\n        this.name = 'TimestampAddon';\r\n        _showTimestamps.set(this, true);\r\n        this.format = format || 'HH:mm:ss';\r\n    }\r\n    onActivate() {\r\n        this.terminal.onData(data => {\r\n            if (this.showingTimestamps && utils_1.charCode(data) === utils_1.CharCodes.LF) {\r\n                this.writeTimestamp();\r\n            }\r\n        });\r\n    }\r\n    writeTimestamp() {\r\n        const now = new Date();\r\n        const formatted = dateFns.format(now, this.format);\r\n        const endCols = this.terminal.cols -\r\n            this.commander.userInput.length -\r\n            formatted.length -\r\n            this.commander.prompt.length;\r\n        this.terminal.write(ansi.cursorForward(endCols));\r\n        this.terminal.write(c.bold(c.grey(formatted)));\r\n    }\r\n    /**\r\n     * Whether or not timestamps will be shown on new commands.\r\n     */\r\n    get showingTimestamps() {\r\n        return __classPrivateFieldGet(this, _showTimestamps);\r\n    }\r\n    /**\r\n     * Toggles the printing of timestamps on or off.\r\n     */\r\n    toggleTimestamps() {\r\n        __classPrivateFieldSet(this, _showTimestamps, !this.showingTimestamps);\r\n    }\r\n}\r\nexports.default = TimestampAddon;\r\n_showTimestamps = new WeakMap();\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NrfTerminalCommander = void 0;\r\nconst NrfTerminalCommander_1 = __importDefault(require(\"./NrfTerminalCommander\"));\r\nexports.NrfTerminalCommander = NrfTerminalCommander_1.default;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.stripAnsiCodes = exports.isLinux = exports.isWindows = exports.isMac = exports.CharCodes = exports.charCode = void 0;\r\nfunction charCode(str) {\r\n    return str.charCodeAt(0);\r\n}\r\nexports.charCode = charCode;\r\nexports.CharCodes = {\r\n    EOL: '\\n',\r\n    LF: 13,\r\n    BACKSPACE: 127,\r\n    ARROW_KEY: 27,\r\n    CTRL_C: 3,\r\n    ESCAPE: 27,\r\n};\r\nfunction isMac() {\r\n    return window.navigator.platform.startsWith('Mac');\r\n}\r\nexports.isMac = isMac;\r\nfunction isWindows() {\r\n    return window.navigator.platform.startsWith('Win');\r\n}\r\nexports.isWindows = isWindows;\r\nfunction isLinux() {\r\n    return window.navigator.platform.startsWith('Linux');\r\n}\r\nexports.isLinux = isLinux;\r\nfunction stripAnsiCodes(str) {\r\n    // eslint-disable-next-line\r\n    const regex = /[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;\r\n    return str.replace(regex, '');\r\n}\r\nexports.stripAnsiCodes = stripAnsiCodes;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"sourceRoot":""}